{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#kuid-kubernetes-identities","title":"Kuid (Kubernetes Identities)","text":"<p><code>Kuid</code> is a cloud-native application that extends the Kubernetes API, dedicated to managing resources (inventory, IP, VLAN, AS, etc.) within your Kubernetes environments. By leveraging Kubernetes-native architecture and customizable fields, Kuid facilitates streamlined resource organization and tracking, offering notable features such as robust IP Address Management (IPAM) capabilities for efficient allocation and oversight of IP resources. Additionally, Kuid provides sophisticated infrastructure management functionalities, empowering users to organize and manage various infrastructure components within a structured hierarchy.</p> <p>One of <code>Kuid's</code> standout features is its flexibility in resource management, allowing users to define resources statically or discover them dynamically. This dynamic discovery capability enables seamless integration with applications built on top of the Kuid API, empowering users to automate resource provisioning and management tasks effectively.</p> <p>Moreover, <code>Kuid</code> introduces the concept of dynamic resource claiming based on selectors, enabling efficient resource allocation based on specific criteria. With these capabilities, Kuid provides a robust and flexible framework for managing resources effectively, whether in traditional or cloud-native environments. By offering comprehensive inventory management and precise resource identification, Kuid empowers users to optimize infrastructure operations and streamline resource provisioning workflows.</p> <p>Leveraging Kubernetes-native architecture and customizable fields, Kuid serves as a cornerstone for automation. Seamlessly integrating into automation workflows, <code>Kuid</code> emerges as a key building block for driving efficiency and scalability in automating your infrastructure.</p>"},{"location":"#architecture","title":"Architecture","text":"<p><code>Kuid</code> extends the Kubernetes API with dedicated resources, ensuring a tailored approach to managing infrastructure and identifiers within Kubernetes environments. Each resource is implemented as a dedicated API, offering specific parameters per resource and customizable key-value pairs to accommodate the diverse requirements of different environments. This flexibility allows users to define resource attributes according to their specific needs, ensuring seamless integration and adaptability across various environments.</p> <p>To guarantee scalability and performance, every resource in <code>Kuid</code> is implemented as a microservice, enabling efficient scaling and resource utilization across distributed environments. This microservices architecture ensures that Kuid can handle large-scale deployments with ease while maintaining optimal performance levels.</p> <p>Moreover, <code>Kuid's</code> architecture allows for seamless integration with different applications leveraging the event-driven API framework of Kubernetes. This capability empowers users to customize specific scenarios and workflows tailored to their unique requirements. Examples include applications for statically provisioning infrastructure resources for a Data Center Clos fabric or implementing a discovery app to validate if the desired state of <code>Kuid</code> resources matches the actual state of the environment.</p> <p>By embracing a scalable and customizable architecture, Kuid offers users the flexibility and agility to meet the evolving demands of their infrastructure environments while ensuring efficient resource management and integration with existing workflows and toolchains.</p> <pre><code>graph TD;\n    subgraph \"Kuid Architecture\"\n        KuidAPI[API Server];\n        KuidControllerA[Kuid Ctrlr Resource A];\n        KuidControllerB[Kuid Ctrlr Resource B];\n        KuidApp1[Custom Application 1];\n        KuidApp2[Custom Applocation 2];\n        KuidDB[Database];\n        KuidAPI --&gt; KuidDB;\n        KuidControllerA --&gt; KuidAPI;\n        KuidControllerB --&gt; KuidAPI;\n        KuidApp1 --&gt; KuidAPI;\n        KuidApp2 --&gt; KuidAPI;\n    end</code></pre>"},{"location":"#features","title":"Features","text":"<p>With its comprehensive set of inventory resources and resource identifiers, Kuid empowers users to effectively manage and optimize their resources across diverse environments.</p>"},{"location":"#inventory-resources","title":"Inventory Resources","text":"<p>Kuid provides a rich set of inventory resources designed to offer comprehensive visibility and management for physical, virtual, and containerized systems. These resources include:</p> <ul> <li>Region, Sites: Organize resources based on geographical regions and sites for efficient management and monitoring.</li> <li>Racks: Define and manage racks to facilitate the organization and placement of hardware components within data center environments.</li> <li>Nodes, Links, Endpoints: Capture and manage nodes, network links, and endpoints to ensure seamless connectivity and efficient resource utilization.</li> <li>ModuleBay, Module, Inventoryitem: Define and manage module bays and modules to facilitate modular hardware configurations and deployments.</li> <li>Cluster: Define and manage clusters to represent logical groupings of resources for efficient orchestration and management.</li> </ul>"},{"location":"#resource-identifiers","title":"Resource Identifiers","text":"<p>Kuid offers a robust set of resource identifiers to facilitate precise identification and allocation of resources within the environment. These identifiers include:</p> <ul> <li>IPAM: Manage IPv4 and IPv6 addresses with optional DNS plugin integration for CoreDNS, ensuring efficient IP address allocation and management.</li> <li>ASN: Allocate and manage Autonomous System Numbers (ASNs) to facilitate routing and networking operations.</li> <li>VLAN, VXLAN: Define and manage Virtual LANs (VLANs) and Virtual Extensible LANs (VXLANs) for network segmentation and isolation.</li> <li>Extended Communities: Define and manage extended communities to facilitate advanced routing and networking configurations.</li> <li>ESI: Manage Ethernet Segment Identifiers (ESIs) to support Ethernet VPN (EVPN) deployments and network virtualization.</li> <li>GeneralID: Define and manage GeneralIDs for versatile identification and allocation of resources.</li> <li>HashID: Generate and manage HashIDs for efficient and secure resource identification and allocation.</li> </ul>"},{"location":"#join-us","title":"Join us","text":"<p>Have questions, ideas, bug reports or just want to chat? Come join our discord server.</p>"},{"location":"02-resources/01_about/","title":"Introduction","text":"<p><code>Kuid</code> serves as a versatile application for managing two distinct categories of resources: <code>inventory</code> and <code>identifiers</code>. The inventory category encompasses resources spanning physical, virtual, and containerized environments, providing users with comprehensive visibility into their infrastructure assets. On the other hand, identifiers such as IP Address Management (IPAM), VLANs, Autonomous Systems, etc facilitate the precise identification and allocation of resources within the environment.</p>"},{"location":"02-resources/02-inventory/01_about/","title":"Inventory","text":"<p>Within the realm of infrastructure management, <code>Kuid</code> excels as a powerful tool for inventory resource management. By offering a comprehensive solution for capturing resources across physical, virtual, and containerized environments, <code>Kuid</code> enables users to gain unparalleled visibility into their infrastructure assets. From servers and virtual machines to containers and beyond, <code>Kuid</code> facilitates the seamless tracking and management of diverse resources within the infrastructure landscape.</p>"},{"location":"02-resources/02-inventory/01_about/#geographical-model","title":"Geographical model","text":"<p>The geographical model in <code>Kuid</code> follows a hierarchical structure to organize infrastructure resources efficiently. At the highest level, we have the concept of a <code>Region</code>. A <code>Region</code> represents a broad geographical area where infrastructure resources are deployed. Within each <code>Region</code>, there can be multiple <code>Sites</code>. Each <code>Site</code> corresponds to a specific physical or logical location within the <code>Region</code>, such as a data center, colo or a cloud region.</p> <p>Within each <code>Site</code>, resources are further organized into <code>Racks</code>. A <code>Rack</code> represents a physical rack used to house hardware components, such as servers, switches, and storage devices. Multiple <code>Racks</code> can exist within a single <code>Site</code>, depending on the size and capacity of the location. A rack is an optional identifier</p> <p>At the lowest level of the hierarchy, we have individual <code>Nodes</code>. <code>Nodes</code> are the fundamental units of compute, storage, or networking resources within the infrastructure. These <code>Nodes</code> are typically deployed within <code>Racks</code> and are responsible for executing applications, storing data, and facilitating network communication.</p> <p>Additionally, each <code>Node</code> may belong to a specific <code>NodeGroup</code>. A <code>NodeGroup</code> represents a logical grouping of <code>Nodes</code> that are managed by a single administrative entity or organization. This allows for centralized management and control of infrastructure resources within a defined administrative boundary. A <code>NodeGroup</code> in <code>kuid</code> is an abstract grouping. E.g. A <code>NodeGroup</code> on one hand, can be used to represent a topology that spans multiple sites and regions, but a <code>NodeGroup</code> can also be used to group all nodes of a cluster together.</p> <p>The relationships between these entities are hierarchical, with each level containing multiple instances of the level below it. For example, a <code>Region</code> may contain multiple <code>Sites</code>, each <code>Site</code> may contain multiple <code>Racks</code>, and each <code>Rack</code> may contain multiple <code>Nodes</code>. This hierarchical organization enables efficient management and scaling of infrastructure resources within <code>Kuid</code>, ensuring optimal performance and resource utilization across different geographical locations.</p> <p>Overall, the geographical model in Kuid provides a structured framework for organizing and managing infrastructure resources, allowing users to efficiently deploy, monitor, and maintain their infrastructure deployments across diverse geographical regions.</p> <pre><code>graph TD;\n    subgraph \"Kuid Geographical Model\"\n        Region\n        Site;\n        Rack;\n        NodeGroup;\n        Node;\n        Region --&gt; |1:N| Site;\n        Site --&gt; |1:N| Rack;\n        Rack --&gt; |1:N| Node;\n        NodeGroup --&gt; |1:1| Node;\n    end</code></pre>"},{"location":"02-resources/02-inventory/01_about/#node-model","title":"Node model","text":"<p>The <code>Node</code> model in Kuid encompasses a hierarchical structure of components essential for infrastructure management. At the core of the model is the <code>Node</code>, representing individual units of compute, storage, or networking resources within the infrastructure. Nodes are composed of various <code>NodeItems</code>, which may include hardware components such as FANs, PowerUnits, CPUs, memory modules, storage disks, and network interfaces. Additionally, <code>Nodes</code> can be equipped with <code>ModuleBays</code>, providing slots for modular hardware components known as <code>Modules</code>. <code>Modules</code> can further extend the capabilities of Nodes and may include specialized hardware for specific tasks. Each Module may contain multiple <code>Endpoints</code>, representing Endpoints for communication with external systems or networks. For pluggable modules an adaptor can be attached to an endpoint to represent a breakout capability which can attach to multiple connectors. This hierarchical arrangement allows for flexible configuration and expansion of <code>Nodes</code>, enabling users to customize and optimize infrastructure resources according to their specific requirements and workloads.</p> <pre><code>graph TD;\n    subgraph \"Kuid Node Model\"\n        Node\n        NodeItem;\n        ModuleBay;\n        Module;\n        Endpoint;\n        Connector;\n        Adaptor;\n        Node --&gt; |1:N| NodeItem;\n        Node --&gt; |1:N| ModuleBay;\n        ModuleBay --&gt; |1:N| Module;\n        Module --&gt; |1:N| Endpoint;\n        Node --&gt; |1:N| Endpoint;\n        Endpoint --&gt; |1:1| Adaptor;\n        Adaptor --&gt; |1:N| Connector;\n        Endpoint --&gt; |1:1| Connector;\n    end</code></pre> <p>We've opted for the name <code>node</code> instead of <code>device</code> as it better encompasses the scope we aim to cover. While 'device' often implies a physical entity, we intend to model both physical and virtual, including containerized entities within our system</p> <p>A <code>node</code> equipped with a set of <code>endpoints</code> resources might suffice as resources to model a fixed format entity. Conversely, modular systems often require the use of additional resources such as <code>NodeItems</code> and <code>ModuleBays</code>/<code>Module(s)</code> to accommodate their flexible configurations.</p>"},{"location":"02-resources/02-inventory/01_about/#connectivity-model","title":"Connectivity model","text":"<p>The connectivity model in <code>Kuid</code> illustrates the communication pathways between <code>Nodes</code> within the infrastructure. Each <code>Node</code>, represented by <code>NodeA</code> and <code>NodeB</code>, is equipped with one or more communication interfaces, known as <code>Connectors</code>. These <code>Connectors</code> serve as connection points for external communication with other Nodes or network devices.</p> <p>In the diagram, <code>ConnectorA1</code> and <code>ConnectorB1</code> represent the communication interfaces of <code>NodeA</code> and <code>NodeB</code>, respectively. These Connectors are connected to each other via <code>Links</code>, which represent the physical or logical connections between Nodes. The <code>Link</code> acts as a conduit for data transmission between the Connectors, facilitating the exchange of information and messages between Nodes.</p> <p>Overall, the connectivity model in Kuid provides a structured framework for establishing and managing communication between Nodes, facilitating efficient data exchange and collaboration within the infrastructure environment.</p> <pre><code>graph TD;\n    subgraph \"Kuid Connectivity Model\"\n        NodeA\n        ConnectorA1;\n        NodeB\n        ConnectorB1;\n        Link;\n        Link &lt;--&gt; ConnectorA1;\n        Link &lt;--&gt; ConnectorB1;\n        ConnectorA1 --&gt; |N:1| NodeA;\n        ConnectorB1 --&gt; |N:1| NodeB;\n    end</code></pre> <p>We've opted for the name <code>connector</code> instead of <code>interface</code> as it better encompasses the scope we aim to cover. While 'interface' is often used in networking we opted for a more neutral term that can be used in different environments</p> <p>A <code>node</code> equipped with a set of <code>endpoints</code> resources might suffice as resources to model a fixed format entity. Conversely, modular systems often require the use of additional resources such as <code>NodeItems</code> and <code>ModuleBays</code>/<code>Module(s)</code> to accommodate their flexible configurations.</p>"},{"location":"02-resources/02-inventory/02_region/","title":"Region","text":"<p>A <code>region</code> in <code>kuid</code> represent a geography in which multiple infrastructure resources are grouped A <code>region</code> might represent a continent, country, city, campus, or other area depending on your environment. </p>"},{"location":"02-resources/02-inventory/02_region/#parameters","title":"Parameters","text":"<p>Customizable key value pairs using labels</p>"},{"location":"02-resources/02-inventory/03_site/","title":"Site","text":"<p>A <code>site</code> in <code>kuid</code> serves as a fundamental organizational unit for managing infrastructure resources within your environment. The utilization of sites may vary based on the organizational structure and requirements, but in essence, each site typically corresponds to a distinct building or campus. </p>"},{"location":"02-resources/02-inventory/03_site/#parameters","title":"Parameters","text":"<p>Region (optional)</p> <p>Location (optional)</p> <p>Customizable key value pairs using labels</p>"},{"location":"02-resources/02-inventory/04_rack/","title":"Rack","text":"<p>A <code>rack</code> in <code>kuid</code> represents a physical equipment rack within your environment. Each rack is designed to accommodate the installation of devices and equipment, providing a structured framework for organizing and managing hardware components. Racks are typically associated with a specific site and may optionally be assigned to a location within that site, offering flexibility in resource allocation and management. </p>"},{"location":"02-resources/02-inventory/05_nodegroup/","title":"NodeGroup","text":"<p>A <code>NodeGrouo</code> in <code>kuid</code> represents a logical grouping of infrastructure resources managed by a single administrative entity or organization. <code>NodeGroups</code> serve as administrative boundaries within the environment, providing a structured framework for organizing and managing resources based on administrative ownership or responsibility. E.g. A <code>NodeGroup</code> on one hand, can be used to represent a topology that spans multiple sites and regions, but a <code>NodeGroup</code> can also be used to group all nodes of a cluster together. </p> <p>Each <code>NodeGroup</code> encapsulates a set of components, such as nodes, nodesets, and other relevant resources, that are administered and maintained by a designated administrative team or department. This hierarchical organization allows for centralized management and control of resources, facilitating efficient allocation, monitoring, and maintenance of assets.</p>"},{"location":"02-resources/02-inventory/06_node/","title":"Node","text":"<p>A <code>Node</code> in <code>kuid</code> represents a fundamental unit that implements compute, storage, and/or networking within your environment. Nodes can embody physical, virtual, or containerized entities, offering versatility in deployment options to suit diverse infrastructure requirements.</p> <p><code>Nodes</code> are logically organized within <code>racks</code> and <code>sites/regions</code>, establishing a hierarchical structure for efficient resource management and organization. Additionally, <code>Nodes</code> are associated with <code>NodeGroups</code>, facilitating centralized management and control within defined administrative boundaries.</p> <p>Each <code>Node</code> is assigned a <code>provider</code>, representing the entity responsible for implementing the specifics of the <code>Node</code>.</p> <p>We've opted for the name <code>node</code> instead of <code>device</code> as it better encompasses the scope we aim to cover. While 'device' often implies a physical entity, we intend to model both physical and virtual, including containerized entities within our system</p>"},{"location":"02-resources/02-inventory/06_node/#parameters","title":"Parameters","text":"<p>Domain (mandatory)</p> <p>Region (mandatory)</p> <p>Site (mandatory)</p> <p>Rack (optional)</p> <p>Position (optional)</p> <p>Location (optional)</p> <p>Provider (mandatory)</p>"},{"location":"02-resources/02-inventory/07_modulebay/","title":"ModuleBay","text":"<p>A <code>ModuleBay</code> in <code>kuid</code> serves as a modular slot or enclosure within a<code>Node</code>, designed to accommodate additional modules. ModuleBays provide a flexible and scalable approach to extending the capabilities of Nodes, allowing users to customize and enhance their infrastructure deployments according to specific requirements. Whether it's adding expansion cards, storage modules, or specialized hardware, ModuleBays offer versatility in configuring and expanding infrastructure resources within the environment.</p>"},{"location":"02-resources/02-inventory/07_modulebay/#parameters","title":"Parameters","text":"<p>Node</p> <p>Position</p> <p>customizable using labels - key/values</p>"},{"location":"02-resources/02-inventory/08_module/","title":"Module","text":"<p>A <code>module</code> in <code>kuid</code> refers to a hardware component or expansion module that can be installed within a <code>ModuleBay</code> of a Node. <code>Modules</code> provide additional functionality and capabilities to the infrastructure environment, allowing users to enhance and customize their deployments according to specific requirements. Whether it's adding specialized networking cards, storage modules, or processing accelerators, Modules offer flexibility in expanding node resources to meet evolving demands and workloads.</p>"},{"location":"02-resources/02-inventory/08_module/#parameters","title":"Parameters","text":"<p>Domain (mandatory)</p> <p>Node (mandatory)</p> <p>ModuleBay (mandatory)</p>"},{"location":"02-resources/02-inventory/09_nodeitem/","title":"NodeItem","text":"<p>A <code>nodeItem</code> in <code>kuid</code> represents a specific hardware component or accessory associated with a Node. <code>NodeItems</code> represent a wide range of hardware elements, e.g Fan(s), PowerUnit(s), CPU(s), and other peripheral devices essential for the operation of the Node. <code>NodeItem</code> is used to represent the modularity of a system.</p>"},{"location":"02-resources/02-inventory/10_endpoint/","title":"Endpoint","text":"<p>An <code>endpoint</code> in <code>kuid</code> represents a communication interface or connection point within a Node, facilitating network communication and data transfer between different components or systems within the environment. <code>Endpoints</code> serve as gateways for transmitting and receiving data, enabling seamless communication between <code>Nodes</code>.</p> <p>A <code>node</code> equipped with a set of <code>endpoints</code> resources might suffice as resources to model a fixed format entity. Conversely, modular systems often require the use of additional resources such as <code>NodeItems</code> and <code>ModuleBays</code>/<code>Module(s)</code> to accommodate their flexible configurations.</p> <p>We've opted for the name <code>endpoint</code> instead of <code>interface</code> as it better encompasses the scope we aim to cover. While 'interface' is often used in networking we opted for a more neutral term that can be used in different environments</p>"},{"location":"02-resources/02-inventory/10_endpoint/#parameters","title":"Parameters","text":"<p>Domain (mandatory) </p> <p>Region (mandatory)</p> <p>Site (mandatory)</p> <p>Rack (optional)</p> <p>Node (mandatory)</p> <p>Interface (mandatory)</p> <p>Speed (optional)</p> <p>Module (optional)</p>"},{"location":"02-resources/02-inventory/11_adaptor/","title":"Adaptor","text":"<p>An <code>adaptor</code> in <code>kuid</code> represents an entity to convert types or forms of connections. Adaptor examples are: - Transceiver modules like SFPs/QSFPs, Breakout modules, optical modules, signal converters, etc</p> <p>An adaptor can have 1 or multiple connectors attached. Breakouts adaptors support a fanout to multiple connectors.</p>"},{"location":"02-resources/02-inventory/11_adaptor/#parameters","title":"Parameters","text":"<p>Domain (mandatory) </p> <p>Region (mandatory)</p> <p>Site (mandatory)</p> <p>Rack (optional)</p> <p>Node (mandatory)</p> <p>Endpoint (mandatory)</p> <p>Speed (optional)</p> <p>Module (optional)</p>"},{"location":"02-resources/02-inventory/12_connector/","title":"Connector","text":"<p>A <code>connector</code> in <code>kuid</code> represents the entity on which a link is connected. It can represent a physical or virtual entity in the inventory.</p>"},{"location":"02-resources/02-inventory/12_connector/#parameters","title":"Parameters","text":"<p>Domain (mandatory) </p> <p>Region (mandatory)</p> <p>Site (mandatory)</p> <p>Rack (optional)</p> <p>Node (mandatory)</p> <p>Endpoint (mandatory)</p> <p>Adaptor (optional)</p> <p>Connector (optional)</p> <p>Speed (optional)</p> <p>Module (optional)</p>"},{"location":"02-resources/02-inventory/13_link/","title":"Link","text":"<p>A <code>link</code> in <code>kuid</code> represents a physical/logical connection that enables communication and data transfer between 2 connectors of a <code>Node</code>. </p>"},{"location":"02-resources/02-inventory/14_cluster/","title":"Cluster","text":"<p>A <code>Cluster</code> in <code>kuid</code> represents a kubernetes cluster and is typically associated to a <code>nodeGroup</code>.</p>"},{"location":"02-resources/02-inventory/15_nodeset/","title":"NodeSet","text":"<p>A <code>nodeSet</code> in <code>kuid</code> represents a set of nodes. E.g. it can be used to model a set of nodes in a <code>cluster</code> that share the same charecteristics wrt, Numa, interfaces, etc. Another usage of NodeSet is the representation of a virtual Node that consists of multiple nodes.</p>"},{"location":"02-resources/02-inventory/16_linkset/","title":"LinkSet","text":"<p>A <code>linkSet</code> in <code>kuid</code> represents a set of links that belong together within a node group or accross nodeGroups. E.g. it can be used to model a logical Link Aggregation group between 2 nodes or it can be used to represent a logical multi-homing construction between a set of nodes belonging to 1 or multiple nodeGroups/Topologies.</p>"},{"location":"02-resources/02-inventory/17_endpointset/","title":"EndpointSet","text":"<p>A <code>endpointSet</code> in <code>kuid</code> represents a set of endpoints that belong together within a nodeGroup. E.g. it can be used to model a logical Link Aggregation group within a node or it can be used to represent a logical multi-homing construction between a set of nodes belonging to a single nodeGroup.</p>"},{"location":"02-resources/03-identifiers/01_about/","title":"Introduction","text":"<p><code>Kuid</code> offers a comprehensive suite of features for managing resource identifiers. These identifiers play a critical role in facilitating precise identification and allocation of network resources within the infrastructure landscape. From IP Address Management (IPAM) to VLANs, Autonomous Systems, etc <code>Kuid</code> provides robust capabilities for managing these key identifiers, ensuring efficient and reliable operation of the environment.</p> <p>With <code>Kuid</code>, users can define and allocate identifiers dynamically, empowering them to adapt and scale their network infrastructure as needed. Whether provisioning new IP addresses, managing VLAN configurations, or assigning Autonomous System Numbers (ASNs), etc <code>Kuid</code> offers flexible and intuitive tools for managing these essential identifiers.</p> <p>Moreover, <code>Kuid's</code> integration with applications built on top of its API enables users to automate the provisioning and management of resource identifiers, streamlining operational workflows and enhancing network agility. Additionally, <code>Kuid</code> introduces dynamic claiming mechanisms based on selectors, allowing users to efficiently allocate identifiers based on specific criteria, further optimizing resource utilization.</p> <p>By offering robust capabilities for managing resource identifiers, <code>Kuid</code> provides a solid foundation for network operations, ensuring seamless connectivity and efficient resource allocation across the infrastructure landscape. Whether managing on-premises networks or cloud-based deployments, Kuid's resource identifier management capabilities empower users to maintain a reliable and scalable network infrastructure.</p>"},{"location":"02-resources/03-identifiers/asn/01_asn_about/","title":"ASN","text":"<p>The Autonomous System (AS) serves as a fundamental component underpinning the Internet, particularly in the context of the Border Gateway Protocol (BGP). Kuid provides robust support for managing Autonomous System Numbers (ASNs) using both 32-bit and 64-bit identifiers.</p>"},{"location":"02-resources/03-identifiers/asn/01_asn_about/#as-index","title":"AS Index","text":"<p>A AS Index serves as a container for ASNs, defining a specific scope for their management. Each AS Index can be associated with an environment, providing clarity on its intended scope. Within a AS Index, a designated minimum and maximum ASN ID can be defined.</p> <p>Each ASN within an index must possess a unique ID and name, facilitating clear identification. </p>"},{"location":"02-resources/03-identifiers/asn/01_asn_about/#as-range","title":"AS Range","text":"<p>To enable more granular ASN management, Kuid supports the subdivision of AS Indexes into ranges. This feature enhances the flexibility and scalability of AS configurations, accommodating diverse network environments and requirements.</p>"},{"location":"02-resources/03-identifiers/asn/01_asn_about/#as","title":"AS","text":"<p>In Kuid, ASNs are modeled as 32 or 64-bit identifiers. Additionally, each AS is endowed with an operational status (implemented using conditions), ensuring visibility into its current state and functionality. ASNs are logically organized within AS Indexes and may optionally be assigned to specific AS range, further enhancing the flexibility and organization of network configurations.</p> <p>The below diagram show the hierarchy in which ASN identifiers are managed.</p> <pre><code>---\ntitle: ASN Management Hierarchy\ntheme: neutral\n---\nflowchart TD\n    i[AS Index] --&gt; |1:N| r[AS Range]\n    i[AS Index] --&gt; |1:N| vi[AS]\n    r[AS Range] --&gt; |1:N| vr[AS]</code></pre>"},{"location":"02-resources/03-identifiers/asn/02_asn_index/","title":"AS Index","text":"<p>A <code>ASIndex</code> serves as a container for ASNs, defining a specific scope for their management. Each <code>ASIndex</code> can be associated with an environment, providing clarity on its intended scope. Within a <code>ASIndex</code>, a designated minimum and maximum ASN ID are defined. Each ASN within an index must possess a unique ID and name, facilitating clear identification and organization. </p>"},{"location":"02-resources/03-identifiers/asn/02_asn_index/#example","title":"Example","text":"<p>A AS Index is managed through the <code>ASIndex</code> Custom Resource Definition (CRD). Below is an example YAML manifest demonstrating the configuration of a AS Index named \"index1\":</p> <pre><code>apiVersion: as.be.kuid.dev/v1alpha1\nkind: ASIndex\nmetadata:\nname: index1\nspec:\nlabels:\ninv.kuid.dev/topology: topo1\n</code></pre>"},{"location":"02-resources/03-identifiers/asn/02_asn_index/#status","title":"Status","text":"<p>he status of the <code>ASIndex</code> is indicated using the READY condition. A True Ready condition indicates the ASIndex was successful. When the Ready condition status is False, the reason and message information in the status provide additional details.</p> <pre><code>kubectl get asindices.as.be.kuid.dev\n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre> <p>Upon successful creation of the AS Index \"index1,\" the status should indicate a True Ready condition, confirming that the AS Index has been successfully provisioned.</p>"},{"location":"02-resources/03-identifiers/asn/02_asn_index/#expected-behavior","title":"Expected behavior","text":"<p>Upon successful creation of the <code>ASIndex</code> \"index1,\" the status should indicate a True Ready condition, confirming that the AS Index has been successfully provisioned.</p>"},{"location":"02-resources/03-identifiers/asn/03_asn_range/","title":"AS Range","text":"<p>Kuid supports the subdivision of AS Indexes into ranges, enhancing the flexibility and scalability of AS configurations to accommodate diverse network environments and requirements.</p>"},{"location":"02-resources/03-identifiers/asn/03_asn_range/#example","title":"Example","text":"<p>A AS range is managed through the <code>ASClaim</code> Custom Resource (CR), requiring specific parameters such as the AS index from which the AS is claimed and the start and end AS identifiers of the range. Below is an example YAML manifest demonstrating the configuration of a AS range claim:</p> <pre><code>apiVersion: as.be.kuid.dev/v1alpha1\nkind: ASClaim\nmetadata:\nname: index1.range1\nspec:\nindex: index1\nrange: 1024-65535\n</code></pre>"},{"location":"02-resources/03-identifiers/asn/03_asn_range/#status","title":"Status","text":"<p>The status of the <code>ASClaim</code> is indicated using the READY condition. A True Ready condition indicates a successful AS range claim in the system. The claimed AS range is also displayed in the status.</p> <pre><code>kubectl get asclaims.as.be.kuid.dev index1.range1\n</code></pre> <pre><code>NAME            READY   INDEX    CLAIMTYPE   CLAIMREQ      CLAIMRSP\nindex1.range1   True    index1   asRange     64512-65534   64512-65534\n</code></pre> <p>If a <code>ASClaim</code> is unsuccessful, the condition will indicate the reason for the failure. For example, a <code>ASClaim</code> cannot overlap with existing entries.</p>"},{"location":"02-resources/03-identifiers/asn/03_asn_range/#status_1","title":"Status","text":"<p>Upon successful creation of the ASN range claim, the status should indicate a True Ready condition, confirming that the ASN range has been successfully claimed in the system.</p>"},{"location":"02-resources/03-identifiers/asn/04_asn/","title":"AS","text":"<p>In Kuid, ASs are managed as 32-bit or 64-bit identifiers. ASs are logically organized within AS Indexes, providing a structured framework for AS management.</p>"},{"location":"02-resources/03-identifiers/asn/04_asn/#static-as","title":"Static AS","text":"<p>Static ASs are explicitly defined with a specific AS ID and are managed through the ASClaim Custom Resource (CR). Each static AS is associated with a AS index and a unique AS ID. If a static AS is defined within a AS Range it is associated to the AS Range within the AS Indez. Below is an example of static AS configurations:</p>"},{"location":"02-resources/03-identifiers/asn/04_asn/#example-static-as","title":"Example static AS","text":"<p>A static AS is configured by specifying the AS index and the static AS ID in the <code>ASClaim</code> CR:</p> <pre><code>apiVersion: as.be.kuid.dev/v1alpha1\nkind: ASClaim\nmetadata:\nname: index1.claim1\nspec:\nindex: index1\nid: 1499547\n</code></pre>"},{"location":"02-resources/03-identifiers/asn/04_asn/#expected-behavior","title":"Expected behavior","text":"<p>Upon successful creation of the static <code>ASClaim</code> \"index1.claim1\", the status should indicate a True Ready condition, confirming that the AS has been successfully claimed with the specified AS ID.</p>"},{"location":"02-resources/03-identifiers/asn/04_asn/#dynamic-as","title":"Dynamic AS","text":"<p>Dynamic ASs are automatically assigned AS IDs by the system and are managed through the <code>ASClaim</code> CR without specifying a AS ID. Optionally, dynamic ASs can be restricted to specific AS ranges using label selectors. Below are examples of dynamic AS configurations:</p>"},{"location":"02-resources/03-identifiers/asn/04_asn/#example-dynamic-as","title":"Example dynamic AS","text":"<p>A dynamic AS is configured by specifying only the AS index in the <code>ASClaim</code> CR:</p> <pre><code>apiVersion: as.be.kuid.dev/v1alpha1\nkind: ASClaim\nmetadata:\nname: index1.claim2\nspec:\nindex: index1\n</code></pre>"},{"location":"02-resources/03-identifiers/asn/04_asn/#example-dynamic-as-within-a-range","title":"Example dynamic AS within a range","text":"<p>A dynamic AS can be restricted to a specific AS range using label selectors in the <code>ASClaim</code> CR:</p> <pre><code>apiVersion: as.be.kuid.dev/v1alpha1\nkind: ASClaim\nmetadata:\nname: index1.claim3\nspec:\nindex: index1\nselector:\nmatchLabels:\nbe.kuid.dev/claim-name: index1.range1\n</code></pre>"},{"location":"02-resources/03-identifiers/asn/04_asn/#expected-behavior_1","title":"Expected behavior","text":"<p>Upon successful creation of the dynamic <code>ASClaim</code>, the status should indicate a True Ready condition, confirming that the <code>AS</code> has been successfully claimed with an automatically assigned AS ID.</p>"},{"location":"02-resources/03-identifiers/asn/04_asn/#status","title":"Status","text":"<p>The status of ASClaims is indicated using the READY condition. A True Ready condition indicates a successful ASClaim. When the Ready condition status is False, the reason and message information in the status provide additional details.</p> <pre><code>kubectl get asclaims.as.be.kuid.dev --all\n</code></pre> <p>status of the static or dynamic AS Claims. The spec and status of the ASClaims are managed using ASPLain notation, while the user is presented using ASdot notation.</p> <pre><code>NAME            READY   INDEX    CLAIMTYPE     CLAIMREQ      CLAIMRSP\nindex1.claim1   True    index1   staticASID    22.57755      22.57755\nindex1.claim2   True    index1   dynamicASID                 65535\nindex1.claim3   True    index1   dynamicASID                 64512\nindex1.range1   True    index1   asRange       64512-65534   64512-65534\n</code></pre>"},{"location":"02-resources/03-identifiers/asn/05_asn_entry/","title":"AS Entry","text":"<p><code>AS Entries</code> in Kuid represent the entries stored in the backend system, providing valuable insights into the state of AS configurations. They serve as a key component for troubleshooting and validating the proper behavior of the system.</p> <p>Given that AS Entries are managed as Kubernetes resources, they can be queried programmatically to assess system health or perform specific tasks based on their contents.</p>"},{"location":"02-resources/03-identifiers/asn/05_asn_entry/#example-output","title":"Example Output","text":"<p>The following example output illustrates the structure and contents of AS Entries:</p> <pre><code>k get asentries.as.be.kuid.dev\n</code></pre> <p>output</p> <pre><code>NAME                     READY   INDEX    CLAIMTYPE     ID\nindex1.1499547-32        True    index1   staticASID    1499547/32\nindex1.64512-23          True    index1   asRange       64512/23\nindex1.65024-24          True    index1   asRange       65024/24\nindex1.65280-25          True    index1   asRange       65280/25\nindex1.65408-26          True    index1   asRange       65408/26\nindex1.65472-27          True    index1   asRange       65472/27\nindex1.65504-28          True    index1   asRange       65504/28\nindex1.65520-29          True    index1   asRange       65520/29\nindex1.65528-30          True    index1   asRange       65528/30\nindex1.65532-31          True    index1   asRange       65532/31\nindex1.65534-32          True    index1   asRange       65534/32\nindex1.65535-32          True    index1   dynamicASID   65535/32\nindex1.range1.64512-32   True    index1   dynamicASID   64512/32\n</code></pre>"},{"location":"02-resources/03-identifiers/extended%20community/about/","title":"About","text":"<p>RFC4360</p>"},{"location":"02-resources/03-identifiers/ipam/01_ipam_about/","title":"IPAM resource","text":"<p>The IP Address Management (IPAM) system comprises of multiple network instances, each housing nested prefixes to facilitate collaboration across teams and environments while maintaining a clear overview of IP usage. Each NetworkInstance manages IP resources, including IP prefixes and ranges, with the top prefix termed as an aggregated prefix. IP resources can be claimed statically or dynamically within a NetworkInstance, utilizing specified or unspecified IP addresses/prefixes. Overlapping IP resources are managed effectively by instantiating multiple network instances. IP resources are further subdivided using IP Prefixes and IP Ranges, with management facilitated through VLANClaim CRD. The system supports various IPClaim types, including static and dynamic allocations for prefixes, addresses, and ranges.\"</p> <p>IPCLAIM types: - static IP Prefix - static IP Address - static IP Range - dynamic IP Prefix - static IP Prefix</p> <p>The below diagram show the hierarchy in which ip resources are managed.</p> <pre><code>---\ntitle: VLAN index\n---\nflowchart TD\n    i[NetworkInstance] --&gt; a[IP Prefix Aggregate]\n    a[IP Prefix Aggregate] --&gt; |1:N| pn[IP Prefix Network]\n    a[IP Prefix Aggregate] --&gt; |1:N| pp[IP Prefix Pool]\n    a[IP Prefix Aggregate] --&gt; |1:N| po[IP Prefix other]\n    pn[IP Prefix Network]--&gt; |1:N| pnr[IP Range]\n    pn[IP Prefix Network]--&gt; |1:N| pna[IP Address]\n    pp[IP Prefix Pool]--&gt; |1:N| ppr[IP Range]\n    pp[IP Prefix Pool] --&gt; |1:N| ppa[IP Address]\n    po[IP Prefix Other] --&gt; |1:N| po[IP Prefix Other]\n    po[IP Prefix Other] --&gt; |1:N| pn[IP Prefix Network]\n    po[IP Prefix Other] --&gt; |1:N| pp[IP Prefix Pool]\n    po[IP Prefix Other]--&gt;|1:N|  por[IP Range]\n    pnr[IP Range] --&gt; |1:N| pnra[IP Address]\n    ppr[IP Range] --&gt; |1:N| ppra[IP Address]\n    por[IP Range] --&gt; |1:N| pora[IP Address]\n\n</code></pre> <p>The IPAM resources are managed in a persistent storage and upon restart or reboot of the system the resources are restored.</p>"},{"location":"02-resources/03-identifiers/ipam/02_ipam_networkinstance/","title":"Network Instance","text":"<p>IP resources are managed through a <code>NetworkInstance</code> CR. A <code>NetworkInstance</code> holds a routing table context in which the ip resources are managed. Both IPV4 and IPv6 addresses are supported within a network instance. The aggregate prefixes within a netowrk instance are defined when creating/updating the networkInstamce. A single Aggregate Prefix is required otherwise the networkInstance will not turn its status to ready</p>"},{"location":"02-resources/03-identifiers/ipam/02_ipam_networkinstance/#example","title":"Example","text":"<p>A NetworkInstance is managed through the <code>NetworkInstance</code> CRD. A single prefix is required to get the network instance ready status</p> <pre><code>apiVersion: ipam.res.kuid.dev/v1alpha1\nkind: NetworkInstance\nmetadata:\nname: vpc1\nspec:\nprefixes:\n- prefix: 10.0.0.0/8\n- prefix: 172.0.0.0/8\n</code></pre>"},{"location":"02-resources/03-identifiers/ipam/02_ipam_networkinstance/#status","title":"Status","text":"<p>The status of the NetworkInstance is indicated using the READY condition. A True Ready condition indicates the NetworkInstance was successfull claimed in the system. When the Ready condition status is False the reason and message information in the status provide additional information.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre>"},{"location":"02-resources/03-identifiers/ipam/03_ipam_ipprefix_static/","title":"IP Prefix","text":""},{"location":"02-resources/03-identifiers/ipam/03_ipam_ipprefix_static/#example","title":"Example","text":"<p>A NetworkInstance is managed through the <code>NetworkInstance</code> CRD. A single prefix is required to get the network instance ready status</p> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.1-24\nspec:\nnetworkInstance: vpc1\nprefix: 10.0.0.0/16\nlabels:\ninv.kuid.dev/network: net1\n</code></pre> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.1-24\nspec:\nnetworkInstance: vpc1\nprefixType: network\nprefix: 10.0.0.1/24\ndefaultGateway: true\nlabels:\ninv.kuid.dev/network: net1\n</code></pre>"},{"location":"02-resources/03-identifiers/ipam/03_ipam_ipprefix_static/#status","title":"Status","text":"<p>The status of the NetworkInstance is indicated using the READY condition. A True Ready condition indicates the NetworkInstance was successfull claimed in the system. When the Ready condition status is False the reason and message information in the status provide additional information.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre>"},{"location":"02-resources/03-identifiers/ipam/04_ipam_ipprefix_dynamic/","title":"IP Prefix","text":""},{"location":"02-resources/03-identifiers/ipam/04_ipam_ipprefix_dynamic/#example","title":"Example","text":"<p>A NetworkInstance is managed through the <code>NetworkInstance</code> CRD. A single prefix is required to get the network instance ready status</p> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.1-24\nspec:\nnetworkInstance: vpc1\nprefix: 10.0.0.0/16\nlabels:\ninv.kuid.dev/network: net1\n</code></pre> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.1-24\nspec:\nnetworkInstance: vpc1\nprefixType: network\nprefix: 10.0.0.1/24\ndefaultGateway: true\nlabels:\ninv.kuid.dev/network: net1\n</code></pre>"},{"location":"02-resources/03-identifiers/ipam/04_ipam_ipprefix_dynamic/#status","title":"Status","text":"<p>The status of the NetworkInstance is indicated using the READY condition. A True Ready condition indicates the NetworkInstance was successfull claimed in the system. When the Ready condition status is False the reason and message information in the status provide additional information.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre>"},{"location":"02-resources/03-identifiers/ipam/05_ipam_ipaddress/","title":"IP Range","text":""},{"location":"02-resources/03-identifiers/ipam/05_ipam_ipaddress/#example","title":"Example","text":"<p>A NetworkInstance is managed through the <code>NetworkInstance</code> CRD. A single prefix is required to get the network instance ready status</p> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.10-32\nspec:\nnetworkInstance: vpc1\naddress: 10.0.0.10/32\n</code></pre>"},{"location":"02-resources/03-identifiers/ipam/05_ipam_ipaddress/#status","title":"Status","text":"<p>The status of the NetworkInstance is indicated using the READY condition. A True Ready condition indicates the NetworkInstance was successfull claimed in the system. When the Ready condition status is False the reason and message information in the status provide additional information.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre>"},{"location":"02-resources/03-identifiers/ipam/06_ipam_ipaddress_dynamic/","title":"IP Range","text":""},{"location":"02-resources/03-identifiers/ipam/06_ipam_ipaddress_dynamic/#example","title":"Example","text":"<p>A NetworkInstance is managed through the <code>NetworkInstance</code> CRD. A single prefix is required to get the network instance ready status</p> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.10-32\nspec:\nnetworkInstance: vpc1\naddress: 10.0.0.10/32\n</code></pre>"},{"location":"02-resources/03-identifiers/ipam/06_ipam_ipaddress_dynamic/#status","title":"Status","text":"<p>The status of the NetworkInstance is indicated using the READY condition. A True Ready condition indicates the NetworkInstance was successfull claimed in the system. When the Ready condition status is False the reason and message information in the status provide additional information.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre>"},{"location":"02-resources/03-identifiers/ipam/07_ipam_ipaddress_static/","title":"IP Range","text":""},{"location":"02-resources/03-identifiers/ipam/07_ipam_ipaddress_static/#example","title":"Example","text":"<p>A NetworkInstance is managed through the <code>NetworkInstance</code> CRD. A single prefix is required to get the network instance ready status</p> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.10-32\nspec:\nnetworkInstance: vpc1\naddress: 10.0.0.10/32\n</code></pre>"},{"location":"02-resources/03-identifiers/ipam/07_ipam_ipaddress_static/#status","title":"Status","text":"<p>The status of the NetworkInstance is indicated using the READY condition. A True Ready condition indicates the NetworkInstance was successfull claimed in the system. When the Ready condition status is False the reason and message information in the status provide additional information.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre>"},{"location":"02-resources/03-identifiers/ipam/08_ipam_ipentry/","title":"IP Range","text":""},{"location":"02-resources/03-identifiers/ipam/08_ipam_ipentry/#example","title":"Example","text":"<p>A NetworkInstance is managed through the <code>NetworkInstance</code> CRD. A single prefix is required to get the network instance ready status</p> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.10-32\nspec:\nnetworkInstance: vpc1\naddress: 10.0.0.10/32\n</code></pre>"},{"location":"02-resources/03-identifiers/ipam/08_ipam_ipentry/#status","title":"Status","text":"<p>The status of the NetworkInstance is indicated using the READY condition. A True Ready condition indicates the NetworkInstance was successfull claimed in the system. When the Ready condition status is False the reason and message information in the status provide additional information.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre>"},{"location":"02-resources/03-identifiers/vlan/01_vlan_about/","title":"VLAN","text":"<p>Kuid implements VLAN management according to IEEE 802.1Q and related standards, ensuring adherence to industry best practices.</p>"},{"location":"02-resources/03-identifiers/vlan/01_vlan_about/#vlan-index","title":"VLAN Index","text":"<p>A VLAN Index serves as a container for VLANs, defining a specific scope for their management. Each VLAN Index can be associated with a site, rack, interface, or similar entity, providing clarity on its intended scope. Within a VLAN Index, a designated minimum and maximum VLAN ID are defined, typically set to the standard values of 1 and 4094, respectively.</p> <p>Each VLAN within an index must possess a unique ID and name, facilitating clear identification and organization. </p>"},{"location":"02-resources/03-identifiers/vlan/01_vlan_about/#vlan-range","title":"VLAN Range","text":"<p>To enable more granular VLAN management, Kuid supports the subdivision of VLAN Indexes into ranges. This feature enhances the flexibility and scalability of VLAN configurations, accommodating diverse network environments and requirements.</p>"},{"location":"02-resources/03-identifiers/vlan/01_vlan_about/#vlan_1","title":"VLAN","text":"<p>In Kuid, VLANs are modeled in accordance with IEEE 802.1Q standards, utilizing a 12-bit VLAN ID and associated name. Additionally, each VLAN is endowed with an operational status (implemented using conditions), ensuring visibility into its current state and functionality. VLANs are logically organized within VLAN Indexes and may optionally be assigned to specific VLAN ranges, further enhancing the flexibility and organization of network configurations.</p> <p>The below diagram show the hierarchy in which VLAN IDs are managed.</p> <pre><code>---\ntitle: VLAN Management Hierarchy\ntheme: neutral\n---\nflowchart TD\n    i[VLAN Index] --&gt; |1:N| r[VLAN Range]\n    i[VLAN Index] --&gt; |1:N| vi[VLAN]\n    r[VLAN Range] --&gt; |1:N| vr[VLAN]</code></pre>"},{"location":"02-resources/03-identifiers/vlan/02_vlan_index/","title":"VLAN Index","text":"<p>A <code>VLANIndex</code> serves as a container for VLANs, defining a specific scope for their management. Each <code>VLANIndex</code> can be associated with a site, rack, interface, or similar entity, providing clarity on its intended scope. Within a <code>VLANIndex</code>, a designated minimum and maximum VLAN ID are defined, typically set to the standard values of 1 and 4094, respectively. Each VLAN within an index must possess a unique ID and name, facilitating clear identification and organization. </p>"},{"location":"02-resources/03-identifiers/vlan/02_vlan_index/#example","title":"Example","text":"<p>A VLAN Index is managed through the <code>VLANIndex</code> Custom Resource Definition (CRD). Below is an example YAML manifest demonstrating the configuration of a VLAN Index named \"index1\":</p> <pre><code>apiVersion: vlan.be.kuid.dev/v1alpha1\nkind: VLANIndex\nmetadata:\nname: index1\nspec:\nlabels:\ninv.kuid.dev/site: us-west-1 </code></pre>"},{"location":"02-resources/03-identifiers/vlan/02_vlan_index/#status","title":"Status","text":"<p>he status of the <code>VLANIndex</code> is indicated using the READY condition. A True Ready condition indicates the VLANIndex was successful. When the Ready condition status is False, the reason and message information in the status provide additional details.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre> <p>Upon successful creation of the VLAN Index \"index1,\" the status should indicate a True Ready condition, confirming that the VLAN Index has been successfully provisioned.</p>"},{"location":"02-resources/03-identifiers/vlan/02_vlan_index/#expected-behavior","title":"Expected behavior","text":"<p>Upon successful creation of the <code>VLANIndex</code> \"index1,\" the status should indicate a True Ready condition, confirming that the VLAN Index has been successfully provisioned.</p>"},{"location":"02-resources/03-identifiers/vlan/03_vlan_range/","title":"VLAN Range","text":"<p>Kuid supports the subdivision of VLAN Indexes into ranges, enhancing the flexibility and scalability of VLAN configurations to accommodate diverse network environments and requirements.</p>"},{"location":"02-resources/03-identifiers/vlan/03_vlan_range/#example","title":"Example","text":"<p>A VLAN range is managed through the <code>VLANClaim</code> Custom Resource (CR), requiring specific parameters such as the VLAN index from which the VLAN is claimed and the start and end VLAN identifiers of the range. Below is an example YAML manifest demonstrating the configuration of a VLAN range claim:</p> <pre><code>apiVersion: vlan.be.kuid.dev/v1alpha1\nkind: VLANClaim\nmetadata:\nname: range-claim\nspec:\nindex: index1\nrange: 200-399\n</code></pre>"},{"location":"02-resources/03-identifiers/vlan/03_vlan_range/#status","title":"Status","text":"<p>The status of the <code>VLANClaim</code> is indicated using the READY condition. A True Ready condition indicates a successful VLAN range claim in the system. The claimed VLAN range is also displayed in the status.</p> <pre><code>kubectl get vlanclaims.vlan.be.kuid.dev\n</code></pre> <pre><code>NAME            READY   INDEX    CLAIMTYPE   CLAIMREQ   CLAIMRSP\nindex1.range1   True    index1   vlanRange   200-399    200-399\n</code></pre> <p>If a <code>VLANClaim</code> is unsuccessful, the condition will indicate the reason for the failure. For example, a <code>VLANClaim</code> cannot overlap with existing entries.</p>"},{"location":"02-resources/03-identifiers/vlan/03_vlan_range/#status_1","title":"Status","text":"<p>Upon successful creation of the VLAN range claim, the status should indicate a True Ready condition, confirming that the VLAN range has been successfully claimed in the system.</p>"},{"location":"02-resources/03-identifiers/vlan/04_vlan/","title":"VLAN","text":"<p>In Kuid, VLANs are managed according to IEEE 802.1Q standards, ensuring adherence to industry best practices for network segmentation and organization. VLANs are logically organized within VLAN Indexes, providing a structured framework for VLAN management.</p>"},{"location":"02-resources/03-identifiers/vlan/04_vlan/#static-vlan","title":"Static VLAN","text":"<p>Static VLANs are explicitly defined with a specific VLAN ID and are managed through the VLANClaim Custom Resource (CR). Each static VLAN is associated with a VLAN index and a unique VLAN ID. If a static VLAN is defined within a VLAN Range it is associated to the VLAN Range within the VLAN Indez. Below is an example of static VLAN configurations:</p>"},{"location":"02-resources/03-identifiers/vlan/04_vlan/#example-static-vlan","title":"Example static VLAN","text":"<p>A static VLAN is configured by specifying the VLAN index and the static VLAN ID in the <code>VLANClaim</code> CR:</p> <pre><code>apiVersion: vlan.be.kuid.dev/v1alpha1\nkind: VLANClaim\nmetadata:\nname: index1.claim1\nspec:\nindex: index1\nid: 100\n</code></pre>"},{"location":"02-resources/03-identifiers/vlan/04_vlan/#expected-behavior","title":"Expected behavior","text":"<p>Upon successful creation of the static <code>VLANClaim</code> \"index1.claim1\", the status should indicate a True Ready condition, confirming that the VLAN has been successfully claimed with the specified VLAN ID.</p>"},{"location":"02-resources/03-identifiers/vlan/04_vlan/#dynamic-vlan","title":"Dynamic VLAN","text":"<p>Dynamic VLANs are automatically assigned VLAN IDs by the system and are managed through the <code>VLANClaim</code> CR without specifying a VLAN ID. Optionally, dynamic VLANs can be restricted to specific VLAN ranges using label selectors. Below are examples of dynamic VLAN configurations:</p>"},{"location":"02-resources/03-identifiers/vlan/04_vlan/#example-dynamic-vlan","title":"Example dynamic VLAN","text":"<p>A dynamic VLAN is configured by specifying only the VLAN index in the <code>VLANClaim</code> CR:</p> <pre><code>apiVersion: vlan.be.kuid.dev/v1alpha1\nkind: VLANClaim\nmetadata:\nname: index1.claim2\nspec:\nindex: index1\n</code></pre>"},{"location":"02-resources/03-identifiers/vlan/04_vlan/#example-dynamic-vlan-within-a-range","title":"Example dynamic VLAN within a range","text":"<p>A dynamic VLAN can be restricted to a specific VLAN range using label selectors in the <code>VLANClaim</code> CR:</p> <pre><code>apiVersion: vlan.be.kuid.dev/v1alpha1\nkind: VLANClaim\nmetadata:\nname: index1.claim3\nspec:\nindex: index1\nselector:\nmatchLabels:\nbe.kuid.dev/claim-name: index1.range1\n</code></pre>"},{"location":"02-resources/03-identifiers/vlan/04_vlan/#expected-behavior_1","title":"Expected behavior","text":"<p>Upon successful creation of the dynamic <code>VLANClaim</code>, the status should indicate a True Ready condition, confirming that the VLAN has been successfully claimed with an automatically assigned VLAN ID.</p>"},{"location":"02-resources/03-identifiers/vlan/04_vlan/#status","title":"Status","text":"<p>The status of VLANClaims is indicated using the READY condition. A True Ready condition indicates a successful VLANClaim. When the Ready condition status is False, the reason and message information in the status provide additional details.</p> <pre><code>kubectl get vlanclaims.vlan.be.kuid.dev\n</code></pre> <p>status of the vlan claims</p> <pre><code>NAME            READY   INDEX    CLAIMTYPE       CLAIMREQ   CLAIMRSP\nindex1.claim1   True    index1   staticVLANID    100        100\nindex1.claim2   True    index1   dynamicVLANID              1\nindex1.claim3   True    index1   dynamicVLANID              200\nindex1.range1   True    index1   vlanRange       200-399    200-399\n</code></pre>"},{"location":"02-resources/03-identifiers/vlan/05_vlan_entry/","title":"VLAN Entry","text":"<p><code>VLAN Entries</code> in Kuid represent the entries stored in the backend system, providing valuable insights into the state of VLAN configurations. They serve as a key component for troubleshooting and validating the proper behavior of the system.</p> <p>Given that VLAN Entries are managed as Kubernetes resources, they can be queried programmatically to assess system health or perform specific tasks based on their contents.</p>"},{"location":"02-resources/03-identifiers/vlan/05_vlan_entry/#example-output","title":"Example Output","text":"<p>The following example output illustrates the structure and contents of VLAN Entries:</p> <pre><code>k get vlanentries.vlan.be.kuid.dev\n</code></pre> <p>output</p> <pre><code>NAME                   READY   INDEX    CLAIMTYPE       ID\nindex1.0-32            True    index1   vlanRange       0/32\nindex1.1-32            True    index1   dynamicVLANID   1/32\nindex1.100-32          True    index1   staticVLANID    100/32\nindex1.200-29          True    index1   vlanRange       200/29\nindex1.208-28          True    index1   vlanRange       208/28\nindex1.224-27          True    index1   vlanRange       224/27\nindex1.256-25          True    index1   vlanRange       256/25\nindex1.384-28          True    index1   vlanRange       384/28\nindex1.4091-32         True    index1   vlanRange       4091/32\nindex1.4092-30         True    index1   vlanRange       4092/30\nindex1.range1.200-32   True    index1   dynamicVLANID   200/32\n</code></pre>"},{"location":"02-resources/03-identifiers/vxlan/01_vxlan_about/","title":"VXLAN","text":"<p>Kuid implements VXLAN management according to RFC7348, ensuring adherence to industry best practices.</p>"},{"location":"02-resources/03-identifiers/vxlan/01_vxlan_about/#vxlan-index","title":"VXLAN Index","text":"<p>A VXLAN Index serves as a container for VXLANs, defining a specific scope for their management. Each VXLAN Index can be associated with an environment, providing clarity on its intended scope. Within a VXLAN Index, a designated minimum and maximum VXLAN ID can be defined.</p> <p>Each VXLAN within an index must possess a unique ID and name, facilitating clear identification. </p>"},{"location":"02-resources/03-identifiers/vxlan/01_vxlan_about/#vxlan-range","title":"VXLAN Range","text":"<p>To enable more granular VXLAN management, Kuid supports the subdivision of VXLAN Indexes into ranges. This feature enhances the flexibility and scalability of VXLAN configurations, accommodating diverse network environments and requirements.</p>"},{"location":"02-resources/03-identifiers/vxlan/01_vxlan_about/#vxlan_1","title":"VXLAN","text":"<p>In Kuid, VXLANs are modeled in accordance with RFC7348, utilizing a 24-bit VNID and associated name. Additionally, each VXLAN is endowed with an operational status (implemented using conditions), ensuring visibility into its current state and functionality. VXLANs are logically organized within VXLAN Indexes and may optionally be assigned to specific VXLAN range, further enhancing the flexibility and organization of network configurations.</p> <p>The below diagram show the hierarchy in which VXLAN VNIDs are managed.</p> <pre><code>---\ntitle: VXLAN Management Hierarchy\ntheme: neutral\n---\nflowchart TD\n    i[VXLAN Index] --&gt; |1:N| r[VXLAN Range]\n    i[VXLAN Index] --&gt; |1:N| vi[VXLAN]\n    r[VXLAN Range] --&gt; |1:N| vr[VXLAN]</code></pre>"},{"location":"02-resources/03-identifiers/vxlan/02_vxlan_index/","title":"VXLAN Index","text":"<p>A <code>VXLANIndex</code> serves as a container for VXLANs, defining a specific scope for their management. Each <code>VXLANIndex</code> can be associated with an environment, providing clarity on its intended scope. Within a <code>VXLANIndex</code>, a designated minimum and maximum VXLAN ID are defined. Each VXLAN within an index must possess a unique ID and name, facilitating clear identification and organization. </p>"},{"location":"02-resources/03-identifiers/vxlan/02_vxlan_index/#example","title":"Example","text":"<p>A VXLAN Index is managed through the <code>VXLANIndex</code> Custom Resource Definition (CRD). Below is an example YAML manifest demonstrating the configuration of a VXLAN Index named \"index1\":</p> <pre><code>apiVersion: vxlan.be.kuid.dev/v1alpha1\nkind: VXLANIndex\nmetadata:\nname: index1\nspec:\nlabels:\ninv.kuid.dev/topology: topo1\n</code></pre>"},{"location":"02-resources/03-identifiers/vxlan/02_vxlan_index/#status","title":"Status","text":"<p>he status of the <code>VXLANIndex</code> is indicated using the READY condition. A True Ready condition indicates the VXLANIndex was successful. When the Ready condition status is False, the reason and message information in the status provide additional details.</p> <pre><code>kubectl get vxlanindices.vxlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre> <p>Upon successful creation of the VXLAN Index \"index1,\" the status should indicate a True Ready condition, confirming that the VXLAN Index has been successfully provisioned.</p>"},{"location":"02-resources/03-identifiers/vxlan/02_vxlan_index/#expected-behavior","title":"Expected behavior","text":"<p>Upon successful creation of the <code>VXLANIndex</code> \"index1,\" the status should indicate a True Ready condition, confirming that the VXLAN Index has been successfully provisioned.</p>"},{"location":"02-resources/03-identifiers/vxlan/03_vxlan_range/","title":"VXLAN Range","text":"<p>Kuid supports the subdivision of VXLAN Indexes into ranges, enhancing the flexibility and scalability of VXLAN configurations to accommodate diverse network environments and requirements.</p>"},{"location":"02-resources/03-identifiers/vxlan/03_vxlan_range/#example","title":"Example","text":"<p>A VXLAN range is managed through the <code>VXLANClaim</code> Custom Resource (CR), requiring specific parameters such as the VXLAN index from which the VXLAN is claimed and the start and end VXLAN identifiers of the range. Below is an example YAML manifest demonstrating the configuration of a VXLAN range claim:</p> <pre><code>apiVersion: vxlan.be.kuid.dev/v1alpha1\nkind: VXLANClaim\nmetadata:\nname: index1.range1\nspec:\nindex: index1\nrange: 1024-65535\n</code></pre>"},{"location":"02-resources/03-identifiers/vxlan/03_vxlan_range/#status","title":"Status","text":"<p>The status of the <code>VXLANClaim</code> is indicated using the READY condition. A True Ready condition indicates a successful VXLAN range claim in the system. The claimed VXLAN range is also displayed in the status.</p> <pre><code>kubectl get vxlanclaims.vxlan.be.kuid.dev static-claim\n</code></pre> <pre><code>NAME            READY   INDEX    CLAIMTYPE    CLAIMREQ     CLAIMRSP\nindex1.range1   True    index1   vxlanRange   1024-65535   1024-65535\n</code></pre> <p>If a <code>VXLANClaim</code> is unsuccessful, the condition will indicate the reason for the failure. For example, a <code>VXLANClaim</code> cannot overlap with existing entries.</p>"},{"location":"02-resources/03-identifiers/vxlan/03_vxlan_range/#status_1","title":"Status","text":"<p>Upon successful creation of the VXLAN range claim, the status should indicate a True Ready condition, confirming that the VXLAN range has been successfully claimed in the system.</p>"},{"location":"02-resources/03-identifiers/vxlan/04_vxlan/","title":"VXLAN","text":"<p>In Kuid, VXLANs are managed according RFC7348, ensuring adherence to industry best practices for network segmentation and organization. VXLANs are logically organized within VXLAN Indexes, providing a structured framework for VXLAN management.</p>"},{"location":"02-resources/03-identifiers/vxlan/04_vxlan/#static-vxlan","title":"Static VXLAN","text":"<p>Static VXLANs are explicitly defined with a specific VXLAN ID and are managed through the VXLANClaim Custom Resource (CR). Each static VXLAN is associated with a VXLAN index and a unique VXLAN ID. If a static VXLAN is defined within a VXLAN Range it is associated to the VXLAN Range within the VXLAN Indez. Below is an example of static VXLAN configurations:</p>"},{"location":"02-resources/03-identifiers/vxlan/04_vxlan/#example-static-vxlan","title":"Example static VXLAN","text":"<p>A static VXLAN is configured by specifying the VXLAN index and the static VXLAN ID in the <code>VXLANClaim</code> CR:</p> <pre><code>apiVersion: vxlan.be.kuid.dev/v1alpha1\nkind: VXLANClaim\nmetadata:\nname: index1.claim1\nspec:\nindex: index1\nid: 100000\n</code></pre>"},{"location":"02-resources/03-identifiers/vxlan/04_vxlan/#expected-behavior","title":"Expected behavior","text":"<p>Upon successful creation of the static <code>VXLANClaim</code> \"index1.claim1\", the status should indicate a True Ready condition, confirming that the VXLAN has been successfully claimed with the specified VXLAN ID.</p>"},{"location":"02-resources/03-identifiers/vxlan/04_vxlan/#dynamic-vxlan","title":"Dynamic VXLAN","text":"<p>Dynamic VXLANs are automatically assigned VXLAN IDs by the system and are managed through the <code>VXLANClaim</code> CR without specifying a VXLAN ID. Optionally, dynamic VXLANs can be restricted to specific VXLAN ranges using label selectors. Below are examples of dynamic VXLAN configurations:</p>"},{"location":"02-resources/03-identifiers/vxlan/04_vxlan/#example-dynamic-vxlan","title":"Example dynamic VXLAN","text":"<p>A dynamic VXLAN is configured by specifying only the VXLAN index in the <code>VXLANClaim</code> CR:</p> <pre><code>apiVersion: vxlan.be.kuid.dev/v1alpha1\nkind: VXLANClaim\nmetadata:\nname: index1.claim2\nspec:\nindex: index1\n</code></pre>"},{"location":"02-resources/03-identifiers/vxlan/04_vxlan/#example-dynamic-vxlan-within-a-range","title":"Example dynamic VXLAN within a range","text":"<p>A dynamic VXLAN can be restricted to a specific VXLAN range using label selectors in the <code>VXLANClaim</code> CR:</p> <pre><code>apiVersion: vxlan.be.kuid.dev/v1alpha1\nkind: VXLANClaim\nmetadata:\nname: index1.claim3\nspec:\nindex: index1\nselector:\nmatchLabels:\nbe.kuid.dev/claim-name: index1.range1\n</code></pre>"},{"location":"02-resources/03-identifiers/vxlan/04_vxlan/#expected-behavior_1","title":"Expected behavior","text":"<p>Upon successful creation of the dynamic <code>VXLANClaim</code>, the status should indicate a True Ready condition, confirming that the VXLAN has been successfully claimed with an automatically assigned VXLAN ID.</p>"},{"location":"02-resources/03-identifiers/vxlan/04_vxlan/#status","title":"Status","text":"<p>The status of VXLANClaims is indicated using the READY condition. A True Ready condition indicates a successful VXLANClaim. When the Ready condition status is False, the reason and message information in the status provide additional details.</p> <pre><code>kubectl get vxlanclaims.vxlan.be.kuid.dev --all\n</code></pre> <p>status of the static or dynamic VXLAN Claims</p> <pre><code>NAME            READY   INDEX    CLAIMTYPE        CLAIMREQ     CLAIMRSP\nindex1.claim1   True    index1   staticVXLANID    100000       100000\nindex1.claim2   True    index1   dynamicVXLANID                0\nindex1.claim3   True    index1   dynamicVXLANID                1024\nindex1.range1   True    index1   vxlanRange       1024-65535   1024-65535\n</code></pre>"},{"location":"02-resources/03-identifiers/vxlan/05_vxlan_entry/","title":"VXLAN Entry","text":"<p><code>VXLAN Entries</code> in Kuid represent the entries stored in the backend system, providing valuable insights into the state of VXLAN configurations. They serve as a key component for troubleshooting and validating the proper behavior of the system.</p> <p>Given that VXLAN Entries are managed as Kubernetes resources, they can be queried programmatically to assess system health or perform specific tasks based on their contents.</p>"},{"location":"02-resources/03-identifiers/vxlan/05_vxlan_entry/#example-output","title":"Example Output","text":"<p>The following example output illustrates the structure and contents of VXLAN Entries:</p> <pre><code>k get vxlanentries.vxlan.be.kuid.dev\n</code></pre> <p>output</p> <pre><code>NAME                    READY   INDEX    CLAIMTYPE        ID\nindex1.0-32             True    index1   dynamicVXLANID   0/32\nindex1.100000-32        True    index1   staticVXLANID    100000/32\nindex1.1024-22          True    index1   vxlanRange       1024/22\nindex1.16384-18         True    index1   vxlanRange       16384/18\nindex1.2048-21          True    index1   vxlanRange       2048/21\nindex1.32768-17         True    index1   vxlanRange       32768/17\nindex1.4096-20          True    index1   vxlanRange       4096/20\nindex1.8192-19          True    index1   vxlanRange       8192/19\nindex1.range1.1024-32   True    index1   dynamicVXLANID   1024/32\n</code></pre>"},{"location":"06-rn/rn/","title":"KUID release notes","text":"<p>We are stil in the early phases of our development, therefore we do not publish aggregated release notes for each of our releases. </p> <p>Release summaries are available on GitHub</p>"},{"location":"07-community/01_about/","title":"Community","text":"<p>Join us in this jurney to build a Kubernetes native network resource management framework. We are happy to help and would like to learn your user stories in our discord server.</p> <p></p> <p>KUID was started and currently maintained by Nokia with the clear target to make the project community driven.</p>"},{"location":"07-community/01_about/#kubenet","title":"Kubenet","text":"<p>If you are intrested in a biger picture about how do we imagine network manegement in a Kubernetes native way check out Kubenet. </p> <p>For more generic discussions about the usage of Kubernetes principles for network device managament join to the Kubenet discord server.</p> <p></p>"},{"location":"07-community/01_about/#logos","title":"Logos","text":"<p>Logos of KUID in different formats:</p> <ul> <li>With name 100x123 png</li> <li>With name 503x690 png</li> <li>Without name 100x100 png</li> <li>With name svg</li> <li>Without name svg</li> </ul>"}]}