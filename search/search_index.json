{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p><code>Kuid</code> is a native Kubernetes tool designed for managing infrastructure resources. Leveraging Kubernetes-native architecture and customizable fields, <code>Kuid</code> serves as a cornerstone for automation by facilitating streamlined resource organization and tracking. Notable features include robust IP Address Management (IPAM) capabilities, enabling efficient allocation and oversight of IP resources. Additionally, Kuid offers sophisticated infrastructure management functionalities, empowering users to organize and manage various infrastructure components within a structured hierarchy. With seamless integration into automation workflows, Kuid emerges as a key building block for driving efficiency and scalability in automating your infrastructure</p>"},{"location":"#architecture","title":"Architecture","text":"<p>Every resource supported by <code>Kuid</code> is implemented as an API resource within Kubernetes, harnessing the full potential of Kubernetes' event-driven API architecture. This design choice ensures seamless integration with Kubernetes tooling, enabling smooth interoperability and leveraging the powerful ecosystem surrounding Kubernetes</p> <pre><code>graph TD;\n\n    subgraph \"Kuid System\"\n        KuidAPI[API Server];\n        KuidControllerA[Controller Resource A];\n        KuidControllerB[Controller Resource B];\n        KuidDB[Database];\n        KuidAPI --&gt; KuidDB;\n        KuidControllerA --&gt; KuidAPI;\n        KuidControllerB --&gt; KuidAPI;\n    end</code></pre>"},{"location":"#features","title":"Features","text":"<p>All resources are modelled as native KRM resources in kubernetes which allows to hierarchically manage resources.</p> <p>Resources:</p> <ul> <li>Region, sites</li> <li>Racks, Nodes, Links</li> <li>IPAM</li> <li>ASN</li> <li>VLAN</li> <li>Extended Communities</li> <li>GeneralID</li> <li>DNS plugin</li> </ul>"},{"location":"#join-us","title":"Join us","text":"<p>Have questions, ideas, bug reports or just want to chat? Come join our discord server.</p>"},{"location":"02-resources/01_about/","title":"Resource introduction","text":"<p>Kuid is a system that aims to manage resources in an organization </p> <ul> <li>tries to retaina. central view of </li> <li>hierarchical: through indices (overlapping identifiers)</li> <li>delegation: </li> <li>event driven</li> </ul>"},{"location":"02-resources/asn/01_asn_about/","title":"ASN","text":"<p>The Autonomous System (AS) serves as a fundamental component underpinning the Internet, particularly in the context of the Border Gateway Protocol (BGP). Kuid provides robust support for managing Autonomous System Numbers (ASNs) using both 32-bit and 64-bit identifiers.</p>"},{"location":"02-resources/asn/01_asn_about/#as-index","title":"AS Index","text":"<p>A AS Index serves as a container for ASNs, defining a specific scope for their management. Each AS Index can be associated with an environment, providing clarity on its intended scope. Within a AS Index, a designated minimum and maximum ASN ID can be defined.</p> <p>Each ASN within an index must possess a unique ID and name, facilitating clear identification. </p>"},{"location":"02-resources/asn/01_asn_about/#as-range","title":"AS Range","text":"<p>To enable more granular ASN management, Kuid supports the subdivision of AS Indexes into ranges. This feature enhances the flexibility and scalability of AS configurations, accommodating diverse network environments and requirements.</p>"},{"location":"02-resources/asn/01_asn_about/#as","title":"AS","text":"<p>In Kuid, ASNs are modeled as 32 or 64-bit identifiers. Additionally, each AS is endowed with an operational status (implemented using conditions), ensuring visibility into its current state and functionality. ASNs are logically organized within AS Indexes and may optionally be assigned to specific AS range, further enhancing the flexibility and organization of network configurations.</p> <p>The below diagram show the hierarchy in which ASN identifiers are managed.</p> <pre><code>---\ntitle: ASN Management Hierarchy\ntheme: neutral\n---\nflowchart TD\n    i[AS Index] --&gt; r[AS Range]\n    i[AS Index] --&gt; vi[AS]\n    r[AS Range] --&gt; vr[AS]</code></pre>"},{"location":"02-resources/asn/02_asn_index/","title":"AS Index","text":"<p>A <code>ASIndex</code> serves as a container for ASNs, defining a specific scope for their management. Each <code>ASIndex</code> can be associated with an environment, providing clarity on its intended scope. Within a <code>ASIndex</code>, a designated minimum and maximum ASN ID are defined. Each ASN within an index must possess a unique ID and name, facilitating clear identification and organization. </p>"},{"location":"02-resources/asn/02_asn_index/#example","title":"Example","text":"<p>A AS Index is managed through the <code>ASIndex</code> Custom Resource Definition (CRD). Below is an example YAML manifest demonstrating the configuration of a AS Index named \"index1\":</p> <pre><code>apiVersion: as.be.kuid.dev/v1alpha1\nkind: ASIndex\nmetadata:\nname: index1\nspec:\nlabels:\ninv.kuid.dev/topology: topo1\n</code></pre>"},{"location":"02-resources/asn/02_asn_index/#status","title":"Status","text":"<p>he status of the <code>ASIndex</code> is indicated using the READY condition. A True Ready condition indicates the ASIndex was successful. When the Ready condition status is False, the reason and message information in the status provide additional details.</p> <pre><code>kubectl get asindices.as.be.kuid.dev\n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre> <p>Upon successful creation of the AS Index \"index1,\" the status should indicate a True Ready condition, confirming that the AS Index has been successfully provisioned.</p>"},{"location":"02-resources/asn/02_asn_index/#expected-behavior","title":"Expected behavior","text":"<p>Upon successful creation of the <code>ASIndex</code> \"index1,\" the status should indicate a True Ready condition, confirming that the AS Index has been successfully provisioned.</p>"},{"location":"02-resources/asn/03_asn_range/","title":"AS Range","text":"<p>Kuid supports the subdivision of AS Indexes into ranges, enhancing the flexibility and scalability of AS configurations to accommodate diverse network environments and requirements.</p>"},{"location":"02-resources/asn/03_asn_range/#example","title":"Example","text":"<p>A AS range is managed through the <code>ASClaim</code> Custom Resource (CR), requiring specific parameters such as the AS index from which the AS is claimed and the start and end AS identifiers of the range. Below is an example YAML manifest demonstrating the configuration of a AS range claim:</p> <pre><code>apiVersion: as.be.kuid.dev/v1alpha1\nkind: ASClaim\nmetadata:\nname: index1.range1\nspec:\nindex: index1\nrange: 1024-65535\n</code></pre>"},{"location":"02-resources/asn/03_asn_range/#status","title":"Status","text":"<p>The status of the <code>ASClaim</code> is indicated using the READY condition. A True Ready condition indicates a successful AS range claim in the system. The claimed AS range is also displayed in the status.</p> <pre><code>kubectl get asclaims.as.be.kuid.dev index1.range1\n</code></pre> <pre><code>NAME            READY   INDEX    CLAIMTYPE   CLAIMREQ      CLAIMRSP\nindex1.range1   True    index1   asRange     64512-65534   64512-65534\n</code></pre> <p>If a <code>ASClaim</code> is unsuccessful, the condition will indicate the reason for the failure. For example, a <code>ASClaim</code> cannot overlap with existing entries.</p>"},{"location":"02-resources/asn/03_asn_range/#status_1","title":"Status","text":"<p>Upon successful creation of the ASN range claim, the status should indicate a True Ready condition, confirming that the ASN range has been successfully claimed in the system.</p>"},{"location":"02-resources/asn/04_asn/","title":"AS","text":"<p>In Kuid, ASs are managed as 32-bit or 64-bit identifiers. ASs are logically organized within AS Indexes, providing a structured framework for AS management.</p>"},{"location":"02-resources/asn/04_asn/#static-as","title":"Static AS","text":"<p>Static ASs are explicitly defined with a specific AS ID and are managed through the ASClaim Custom Resource (CR). Each static AS is associated with a AS index and a unique AS ID. If a static AS is defined within a AS Range it is associated to the AS Range within the AS Indez. Below is an example of static AS configurations:</p>"},{"location":"02-resources/asn/04_asn/#example-static-as","title":"Example static AS","text":"<p>A static AS is configured by specifying the AS index and the static AS ID in the <code>ASClaim</code> CR:</p> <pre><code>apiVersion: as.be.kuid.dev/v1alpha1\nkind: ASClaim\nmetadata:\nname: index1.claim1\nspec:\nindex: index1\nid: 1499547\n</code></pre>"},{"location":"02-resources/asn/04_asn/#expected-behavior","title":"Expected behavior","text":"<p>Upon successful creation of the static <code>ASClaim</code> \"index1.claim1\", the status should indicate a True Ready condition, confirming that the AS has been successfully claimed with the specified AS ID.</p>"},{"location":"02-resources/asn/04_asn/#dynamic-as","title":"Dynamic AS","text":"<p>Dynamic ASs are automatically assigned AS IDs by the system and are managed through the <code>ASClaim</code> CR without specifying a AS ID. Optionally, dynamic ASs can be restricted to specific AS ranges using label selectors. Below are examples of dynamic AS configurations:</p>"},{"location":"02-resources/asn/04_asn/#example-dynamic-as","title":"Example dynamic AS","text":"<p>A dynamic AS is configured by specifying only the AS index in the <code>ASClaim</code> CR:</p> <pre><code>apiVersion: as.be.kuid.dev/v1alpha1\nkind: ASClaim\nmetadata:\nname: index1.claim2\nspec:\nindex: index1\n</code></pre>"},{"location":"02-resources/asn/04_asn/#example-dynamic-as-within-a-range","title":"Example dynamic AS within a range","text":"<p>A dynamic AS can be restricted to a specific AS range using label selectors in the <code>ASClaim</code> CR:</p> <pre><code>apiVersion: as.be.kuid.dev/v1alpha1\nkind: ASClaim\nmetadata:\nname: index1.claim3\nspec:\nindex: index1\nselector:\nmatchLabels:\nbe.kuid.dev/claim-name: index1.range1\n</code></pre>"},{"location":"02-resources/asn/04_asn/#expected-behavior_1","title":"Expected behavior","text":"<p>Upon successful creation of the dynamic <code>ASClaim</code>, the status should indicate a True Ready condition, confirming that the <code>AS</code> has been successfully claimed with an automatically assigned AS ID.</p>"},{"location":"02-resources/asn/04_asn/#status","title":"Status","text":"<p>The status of ASClaims is indicated using the READY condition. A True Ready condition indicates a successful ASClaim. When the Ready condition status is False, the reason and message information in the status provide additional details.</p> <pre><code>kubectl get asclaims.as.be.kuid.dev --all\n</code></pre> <p>status of the static or dynamic AS Claims. The spec and status of the ASClaims are managed using ASPLain notation, while the user is presented using ASdot notation.</p> <pre><code>NAME            READY   INDEX    CLAIMTYPE     CLAIMREQ      CLAIMRSP\nindex1.claim1   True    index1   staticASID    22.57755      22.57755\nindex1.claim2   True    index1   dynamicASID                 65535\nindex1.claim3   True    index1   dynamicASID                 64512\nindex1.range1   True    index1   asRange       64512-65534   64512-65534\n</code></pre>"},{"location":"02-resources/asn/05_asn_entry/","title":"AS Entry","text":"<p><code>AS Entries</code> in Kuid represent the entries stored in the backend system, providing valuable insights into the state of AS configurations. They serve as a key component for troubleshooting and validating the proper behavior of the system.</p> <p>Given that AS Entries are managed as Kubernetes resources, they can be queried programmatically to assess system health or perform specific tasks based on their contents.</p>"},{"location":"02-resources/asn/05_asn_entry/#example-output","title":"Example Output","text":"<p>The following example output illustrates the structure and contents of AS Entries:</p> <pre><code>k get asentries.as.be.kuid.dev\n</code></pre> <p>output</p> <pre><code>NAME                     READY   INDEX    CLAIMTYPE     ID\nindex1.1499547-32        True    index1   staticASID    1499547/32\nindex1.64512-23          True    index1   asRange       64512/23\nindex1.65024-24          True    index1   asRange       65024/24\nindex1.65280-25          True    index1   asRange       65280/25\nindex1.65408-26          True    index1   asRange       65408/26\nindex1.65472-27          True    index1   asRange       65472/27\nindex1.65504-28          True    index1   asRange       65504/28\nindex1.65520-29          True    index1   asRange       65520/29\nindex1.65528-30          True    index1   asRange       65528/30\nindex1.65532-31          True    index1   asRange       65532/31\nindex1.65534-32          True    index1   asRange       65534/32\nindex1.65535-32          True    index1   dynamicASID   65535/32\nindex1.range1.64512-32   True    index1   dynamicASID   64512/32\n</code></pre>"},{"location":"02-resources/ipam/01_ipam_about/","title":"IPAM resource","text":"<p>The IP Address Management (IPAM) system comprises of multiple network instances, each housing nested prefixes to facilitate collaboration across teams and environments while maintaining a clear overview of IP usage. Each NetworkInstance manages IP resources, including IP prefixes and ranges, with the top prefix termed as an aggregated prefix. IP resources can be claimed statically or dynamically within a NetworkInstance, utilizing specified or unspecified IP addresses/prefixes. Overlapping IP resources are managed effectively by instantiating multiple network instances. IP resources are further subdivided using IP Prefixes and IP Ranges, with management facilitated through VLANClaim CRD. The system supports various IPClaim types, including static and dynamic allocations for prefixes, addresses, and ranges.\"</p> <p>IPCLAIM types: - static IP Prefix - static IP Address - static IP Range - dynamic IP Prefix - static IP Prefix</p> <p>The below diagram show the hierarchy in which ip resources are managed.</p> <pre><code>---\ntitle: VLAN index\n---\nflowchart TD\n    i[NetworkInstance] --&gt; a[IP Prefix Aggregate]\n    a[IP Prefix Aggregate] --&gt; pn[IP Prefix Network]\n    a[IP Prefix Aggregate] --&gt; pp[IP Prefix Pool]\n    a[IP Prefix Aggregate] --&gt; po[IP Prefix other]\n    pn[IP Prefix Network]--&gt; pnr[IP Range]\n    pn[IP Prefix Network]--&gt; pna[IP Address]\n    pp[IP Prefix Pool]--&gt; ppr[IP Range]\n    pp[IP Prefix Pool] --&gt; ppa[IP Address]\n    po[IP Prefix Other] --&gt; po[IP Prefix Other]\n    po[IP Prefix Other] --&gt; pn[IP Prefix Network]\n    po[IP Prefix Other] --&gt; pp[IP Prefix Pool]\n    po[IP Prefix Other]--&gt; por[IP Range]\n    pnr[IP Range] --&gt; pnra[IP Address]\n    ppr[IP Range] --&gt; ppra[IP Address]\n    por[IP Range] --&gt; pora[IP Address]\n\n</code></pre> <p>The IPAM resources are managed in a persistent storage and upon restart or reboot of the system the resources are restored.</p>"},{"location":"02-resources/ipam/02_ipam_networkinstance/","title":"Network Instance","text":"<p>IP resources are managed through a <code>NetworkInstance</code> CR. A <code>NetworkInstance</code> holds a routing table context in which the ip resources are managed. Both IPV4 and IPv6 addresses are supported within a network instance. The aggregate prefixes within a netowrk instance are defined when creating/updating the networkInstamce. A single Aggregate Prefix is required otherwise the networkInstance will not turn its status to ready</p>"},{"location":"02-resources/ipam/02_ipam_networkinstance/#example","title":"Example","text":"<p>A NetworkInstance is managed through the <code>NetworkInstance</code> CRD. A single prefix is required to get the network instance ready status</p> <pre><code>apiVersion: ipam.res.kuid.dev/v1alpha1\nkind: NetworkInstance\nmetadata:\nname: vpc1\nspec:\nprefixes:\n- prefix: 10.0.0.0/8\n- prefix: 172.0.0.0/8\n</code></pre>"},{"location":"02-resources/ipam/02_ipam_networkinstance/#status","title":"Status","text":"<p>The status of the NetworkInstance is indicated using the READY condition. A True Ready condition indicates the NetworkInstance was successfull claimed in the system. When the Ready condition status is False the reason and message information in the status provide additional information.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre>"},{"location":"02-resources/ipam/03_ipam_ipprefix_static/","title":"IP Prefix","text":""},{"location":"02-resources/ipam/03_ipam_ipprefix_static/#example","title":"Example","text":"<p>A NetworkInstance is managed through the <code>NetworkInstance</code> CRD. A single prefix is required to get the network instance ready status</p> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.1-24\nspec:\nnetworkInstance: vpc1\nprefix: 10.0.0.0/16\nlabels:\ninv.kuid.dev/network: net1\n</code></pre> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.1-24\nspec:\nnetworkInstance: vpc1\nprefixType: network\nprefix: 10.0.0.1/24\ndefaultGateway: true\nlabels:\ninv.kuid.dev/network: net1\n</code></pre>"},{"location":"02-resources/ipam/03_ipam_ipprefix_static/#status","title":"Status","text":"<p>The status of the NetworkInstance is indicated using the READY condition. A True Ready condition indicates the NetworkInstance was successfull claimed in the system. When the Ready condition status is False the reason and message information in the status provide additional information.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre>"},{"location":"02-resources/ipam/04_ipam_ipprefix_dynamic/","title":"IP Prefix","text":""},{"location":"02-resources/ipam/04_ipam_ipprefix_dynamic/#example","title":"Example","text":"<p>A NetworkInstance is managed through the <code>NetworkInstance</code> CRD. A single prefix is required to get the network instance ready status</p> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.1-24\nspec:\nnetworkInstance: vpc1\nprefix: 10.0.0.0/16\nlabels:\ninv.kuid.dev/network: net1\n</code></pre> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.1-24\nspec:\nnetworkInstance: vpc1\nprefixType: network\nprefix: 10.0.0.1/24\ndefaultGateway: true\nlabels:\ninv.kuid.dev/network: net1\n</code></pre>"},{"location":"02-resources/ipam/04_ipam_ipprefix_dynamic/#status","title":"Status","text":"<p>The status of the NetworkInstance is indicated using the READY condition. A True Ready condition indicates the NetworkInstance was successfull claimed in the system. When the Ready condition status is False the reason and message information in the status provide additional information.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre>"},{"location":"02-resources/ipam/05_ipam_ipaddress/","title":"IP Range","text":""},{"location":"02-resources/ipam/05_ipam_ipaddress/#example","title":"Example","text":"<p>A NetworkInstance is managed through the <code>NetworkInstance</code> CRD. A single prefix is required to get the network instance ready status</p> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.10-32\nspec:\nnetworkInstance: vpc1\naddress: 10.0.0.10/32\n</code></pre>"},{"location":"02-resources/ipam/05_ipam_ipaddress/#status","title":"Status","text":"<p>The status of the NetworkInstance is indicated using the READY condition. A True Ready condition indicates the NetworkInstance was successfull claimed in the system. When the Ready condition status is False the reason and message information in the status provide additional information.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre>"},{"location":"02-resources/ipam/06_ipam_ipaddress_dynamic/","title":"IP Range","text":""},{"location":"02-resources/ipam/06_ipam_ipaddress_dynamic/#example","title":"Example","text":"<p>A NetworkInstance is managed through the <code>NetworkInstance</code> CRD. A single prefix is required to get the network instance ready status</p> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.10-32\nspec:\nnetworkInstance: vpc1\naddress: 10.0.0.10/32\n</code></pre>"},{"location":"02-resources/ipam/06_ipam_ipaddress_dynamic/#status","title":"Status","text":"<p>The status of the NetworkInstance is indicated using the READY condition. A True Ready condition indicates the NetworkInstance was successfull claimed in the system. When the Ready condition status is False the reason and message information in the status provide additional information.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre>"},{"location":"02-resources/ipam/07_ipam_ipaddress_static/","title":"IP Range","text":""},{"location":"02-resources/ipam/07_ipam_ipaddress_static/#example","title":"Example","text":"<p>A NetworkInstance is managed through the <code>NetworkInstance</code> CRD. A single prefix is required to get the network instance ready status</p> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.10-32\nspec:\nnetworkInstance: vpc1\naddress: 10.0.0.10/32\n</code></pre>"},{"location":"02-resources/ipam/07_ipam_ipaddress_static/#status","title":"Status","text":"<p>The status of the NetworkInstance is indicated using the READY condition. A True Ready condition indicates the NetworkInstance was successfull claimed in the system. When the Ready condition status is False the reason and message information in the status provide additional information.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre>"},{"location":"02-resources/ipam/08_ipam_ipentry/","title":"IP Range","text":""},{"location":"02-resources/ipam/08_ipam_ipentry/#example","title":"Example","text":"<p>A NetworkInstance is managed through the <code>NetworkInstance</code> CRD. A single prefix is required to get the network instance ready status</p> <pre><code>apiVersion: ipam.be.kuid.dev/v1alpha1\nkind: IPClaim\nmetadata:\nname: vpc1.10.0.0.10-32\nspec:\nnetworkInstance: vpc1\naddress: 10.0.0.10/32\n</code></pre>"},{"location":"02-resources/ipam/08_ipam_ipentry/#status","title":"Status","text":"<p>The status of the NetworkInstance is indicated using the READY condition. A True Ready condition indicates the NetworkInstance was successfull claimed in the system. When the Ready condition status is False the reason and message information in the status provide additional information.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre>"},{"location":"02-resources/vlan/01_vlan_about/","title":"VLAN","text":"<p>Kuid implements VLAN management according to IEEE 802.1Q and related standards, ensuring adherence to industry best practices.</p>"},{"location":"02-resources/vlan/01_vlan_about/#vlan-index","title":"VLAN Index","text":"<p>A VLAN Index serves as a container for VLANs, defining a specific scope for their management. Each VLAN Index can be associated with a site, rack, interface, or similar entity, providing clarity on its intended scope. Within a VLAN Index, a designated minimum and maximum VLAN ID are defined, typically set to the standard values of 1 and 4094, respectively.</p> <p>Each VLAN within an index must possess a unique ID and name, facilitating clear identification and organization. </p>"},{"location":"02-resources/vlan/01_vlan_about/#vlan-range","title":"VLAN Range","text":"<p>To enable more granular VLAN management, Kuid supports the subdivision of VLAN Indexes into ranges. This feature enhances the flexibility and scalability of VLAN configurations, accommodating diverse network environments and requirements.</p>"},{"location":"02-resources/vlan/01_vlan_about/#vlan_1","title":"VLAN","text":"<p>In Kuid, VLANs are modeled in accordance with IEEE 802.1Q standards, utilizing a 12-bit VLAN ID and associated name. Additionally, each VLAN is endowed with an operational status (implemented using conditions), ensuring visibility into its current state and functionality. VLANs are logically organized within VLAN Indexes and may optionally be assigned to specific VLAN ranges, further enhancing the flexibility and organization of network configurations.</p> <p>The below diagram show the hierarchy in which VLAN IDs are managed.</p> <pre><code>---\ntitle: VLAN Management Hierarchy\ntheme: neutral\n---\nflowchart TD\n    i[VLAN Index] --&gt; r[VLAN Range]\n    i[VLAN Index] --&gt; vi[VLAN]\n    r[VLAN Range] --&gt; vr[VLAN]</code></pre>"},{"location":"02-resources/vlan/02_vlan_index/","title":"VLAN Index","text":"<p>A <code>VLANIndex</code> serves as a container for VLANs, defining a specific scope for their management. Each <code>VLANIndex</code> can be associated with a site, rack, interface, or similar entity, providing clarity on its intended scope. Within a <code>VLANIndex</code>, a designated minimum and maximum VLAN ID are defined, typically set to the standard values of 1 and 4094, respectively. Each VLAN within an index must possess a unique ID and name, facilitating clear identification and organization. </p>"},{"location":"02-resources/vlan/02_vlan_index/#example","title":"Example","text":"<p>A VLAN Index is managed through the <code>VLANIndex</code> Custom Resource Definition (CRD). Below is an example YAML manifest demonstrating the configuration of a VLAN Index named \"index1\":</p> <pre><code>apiVersion: vlan.be.kuid.dev/v1alpha1\nkind: VLANIndex\nmetadata:\nname: index1\nspec:\nlabels:\ninv.kuid.dev/site: us-west-1 </code></pre>"},{"location":"02-resources/vlan/02_vlan_index/#status","title":"Status","text":"<p>he status of the <code>VLANIndex</code> is indicated using the READY condition. A True Ready condition indicates the VLANIndex was successful. When the Ready condition status is False, the reason and message information in the status provide additional details.</p> <pre><code>kubectl get vlanindices.vlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre> <p>Upon successful creation of the VLAN Index \"index1,\" the status should indicate a True Ready condition, confirming that the VLAN Index has been successfully provisioned.</p>"},{"location":"02-resources/vlan/02_vlan_index/#expected-behavior","title":"Expected behavior","text":"<p>Upon successful creation of the <code>VLANIndex</code> \"index1,\" the status should indicate a True Ready condition, confirming that the VLAN Index has been successfully provisioned.</p>"},{"location":"02-resources/vlan/03_vlan_range/","title":"VLAN Range","text":"<p>Kuid supports the subdivision of VLAN Indexes into ranges, enhancing the flexibility and scalability of VLAN configurations to accommodate diverse network environments and requirements.</p>"},{"location":"02-resources/vlan/03_vlan_range/#example","title":"Example","text":"<p>A VLAN range is managed through the <code>VLANClaim</code> Custom Resource (CR), requiring specific parameters such as the VLAN index from which the VLAN is claimed and the start and end VLAN identifiers of the range. Below is an example YAML manifest demonstrating the configuration of a VLAN range claim:</p> <pre><code>apiVersion: vlan.be.kuid.dev/v1alpha1\nkind: VLANClaim\nmetadata:\nname: range-claim\nspec:\nindex: index1\nrange: 200-399\n</code></pre>"},{"location":"02-resources/vlan/03_vlan_range/#status","title":"Status","text":"<p>The status of the <code>VLANClaim</code> is indicated using the READY condition. A True Ready condition indicates a successful VLAN range claim in the system. The claimed VLAN range is also displayed in the status.</p> <pre><code>kubectl get vlanclaims.vlan.be.kuid.dev\n</code></pre> <pre><code>NAME            READY   INDEX    CLAIMTYPE   CLAIMREQ   CLAIMRSP\nindex1.range1   True    index1   vlanRange   200-399    200-399\n</code></pre> <p>If a <code>VLANClaim</code> is unsuccessful, the condition will indicate the reason for the failure. For example, a <code>VLANClaim</code> cannot overlap with existing entries.</p>"},{"location":"02-resources/vlan/03_vlan_range/#status_1","title":"Status","text":"<p>Upon successful creation of the VLAN range claim, the status should indicate a True Ready condition, confirming that the VLAN range has been successfully claimed in the system.</p>"},{"location":"02-resources/vlan/04_vlan/","title":"VLAN","text":"<p>In Kuid, VLANs are managed according to IEEE 802.1Q standards, ensuring adherence to industry best practices for network segmentation and organization. VLANs are logically organized within VLAN Indexes, providing a structured framework for VLAN management.</p>"},{"location":"02-resources/vlan/04_vlan/#static-vlan","title":"Static VLAN","text":"<p>Static VLANs are explicitly defined with a specific VLAN ID and are managed through the VLANClaim Custom Resource (CR). Each static VLAN is associated with a VLAN index and a unique VLAN ID. If a static VLAN is defined within a VLAN Range it is associated to the VLAN Range within the VLAN Indez. Below is an example of static VLAN configurations:</p>"},{"location":"02-resources/vlan/04_vlan/#example-static-vlan","title":"Example static VLAN","text":"<p>A static VLAN is configured by specifying the VLAN index and the static VLAN ID in the <code>VLANClaim</code> CR:</p> <pre><code>apiVersion: vlan.be.kuid.dev/v1alpha1\nkind: VLANClaim\nmetadata:\nname: index1.claim1\nspec:\nindex: index1\nid: 100\n</code></pre>"},{"location":"02-resources/vlan/04_vlan/#expected-behavior","title":"Expected behavior","text":"<p>Upon successful creation of the static <code>VLANClaim</code> \"index1.claim1\", the status should indicate a True Ready condition, confirming that the VLAN has been successfully claimed with the specified VLAN ID.</p>"},{"location":"02-resources/vlan/04_vlan/#dynamic-vlan","title":"Dynamic VLAN","text":"<p>Dynamic VLANs are automatically assigned VLAN IDs by the system and are managed through the <code>VLANClaim</code> CR without specifying a VLAN ID. Optionally, dynamic VLANs can be restricted to specific VLAN ranges using label selectors. Below are examples of dynamic VLAN configurations:</p>"},{"location":"02-resources/vlan/04_vlan/#example-dynamic-vlan","title":"Example dynamic VLAN","text":"<p>A dynamic VLAN is configured by specifying only the VLAN index in the <code>VLANClaim</code> CR:</p> <pre><code>apiVersion: vlan.be.kuid.dev/v1alpha1\nkind: VLANClaim\nmetadata:\nname: index1.claim2\nspec:\nindex: index1\n</code></pre>"},{"location":"02-resources/vlan/04_vlan/#example-dynamic-vlan-within-a-range","title":"Example dynamic VLAN within a range","text":"<p>A dynamic VLAN can be restricted to a specific VLAN range using label selectors in the <code>VLANClaim</code> CR:</p> <pre><code>apiVersion: vlan.be.kuid.dev/v1alpha1\nkind: VLANClaim\nmetadata:\nname: index1.claim3\nspec:\nindex: index1\nselector:\nmatchLabels:\nbe.kuid.dev/claim-name: index1.range1\n</code></pre>"},{"location":"02-resources/vlan/04_vlan/#expected-behavior_1","title":"Expected behavior","text":"<p>Upon successful creation of the dynamic <code>VLANClaim</code>, the status should indicate a True Ready condition, confirming that the VLAN has been successfully claimed with an automatically assigned VLAN ID.</p>"},{"location":"02-resources/vlan/04_vlan/#status","title":"Status","text":"<p>The status of VLANClaims is indicated using the READY condition. A True Ready condition indicates a successful VLANClaim. When the Ready condition status is False, the reason and message information in the status provide additional details.</p> <pre><code>kubectl get vlanclaims.vlan.be.kuid.dev\n</code></pre> <p>status of the vlan claims</p> <pre><code>NAME            READY   INDEX    CLAIMTYPE       CLAIMREQ   CLAIMRSP\nindex1.claim1   True    index1   staticVLANID    100        100\nindex1.claim2   True    index1   dynamicVLANID              1\nindex1.claim3   True    index1   dynamicVLANID              200\nindex1.range1   True    index1   vlanRange       200-399    200-399\n</code></pre>"},{"location":"02-resources/vlan/05_vlan_entry/","title":"VLAN Entry","text":"<p><code>VLAN Entries</code> in Kuid represent the entries stored in the backend system, providing valuable insights into the state of VLAN configurations. They serve as a key component for troubleshooting and validating the proper behavior of the system.</p> <p>Given that VLAN Entries are managed as Kubernetes resources, they can be queried programmatically to assess system health or perform specific tasks based on their contents.</p>"},{"location":"02-resources/vlan/05_vlan_entry/#example-output","title":"Example Output","text":"<p>The following example output illustrates the structure and contents of VLAN Entries:</p> <pre><code>k get vlanentries.vlan.be.kuid.dev\n</code></pre> <p>output</p> <pre><code>NAME                   READY   INDEX    CLAIMTYPE       ID\nindex1.0-32            True    index1   vlanRange       0/32\nindex1.1-32            True    index1   dynamicVLANID   1/32\nindex1.100-32          True    index1   staticVLANID    100/32\nindex1.200-29          True    index1   vlanRange       200/29\nindex1.208-28          True    index1   vlanRange       208/28\nindex1.224-27          True    index1   vlanRange       224/27\nindex1.256-25          True    index1   vlanRange       256/25\nindex1.384-28          True    index1   vlanRange       384/28\nindex1.4091-32         True    index1   vlanRange       4091/32\nindex1.4092-30         True    index1   vlanRange       4092/30\nindex1.range1.200-32   True    index1   dynamicVLANID   200/32\n</code></pre>"},{"location":"02-resources/vxlan/01_vxlan_about/","title":"VXLAN","text":"<p>Kuid implements VXLAN management according to RFC7348, ensuring adherence to industry best practices.</p>"},{"location":"02-resources/vxlan/01_vxlan_about/#vxlan-index","title":"VXLAN Index","text":"<p>A VXLAN Index serves as a container for VXLANs, defining a specific scope for their management. Each VXLAN Index can be associated with an environment, providing clarity on its intended scope. Within a VXLAN Index, a designated minimum and maximum VXLAN ID can be defined.</p> <p>Each VXLAN within an index must possess a unique ID and name, facilitating clear identification. </p>"},{"location":"02-resources/vxlan/01_vxlan_about/#vxlan-range","title":"VXLAN Range","text":"<p>To enable more granular VXLAN management, Kuid supports the subdivision of VXLAN Indexes into ranges. This feature enhances the flexibility and scalability of VXLAN configurations, accommodating diverse network environments and requirements.</p>"},{"location":"02-resources/vxlan/01_vxlan_about/#vxlan_1","title":"VXLAN","text":"<p>In Kuid, VXLANs are modeled in accordance with RFC7348, utilizing a 24-bit VNID and associated name. Additionally, each VXLAN is endowed with an operational status (implemented using conditions), ensuring visibility into its current state and functionality. VXLANs are logically organized within VXLAN Indexes and may optionally be assigned to specific VXLAN range, further enhancing the flexibility and organization of network configurations.</p> <p>The below diagram show the hierarchy in which VXLAN VNIDs are managed.</p> <pre><code>---\ntitle: VXLAN Management Hierarchy\ntheme: neutral\n---\nflowchart TD\n    i[VXLAN Index] --&gt; r[VXLAN Range]\n    i[VXLAN Index] --&gt; vi[VXLAN]\n    r[VXLAN Range] --&gt; vr[VXLAN]</code></pre>"},{"location":"02-resources/vxlan/02_vxlan_index/","title":"VXLAN Index","text":"<p>A <code>VXLANIndex</code> serves as a container for VXLANs, defining a specific scope for their management. Each <code>VXLANIndex</code> can be associated with an environment, providing clarity on its intended scope. Within a <code>VXLANIndex</code>, a designated minimum and maximum VXLAN ID are defined. Each VXLAN within an index must possess a unique ID and name, facilitating clear identification and organization. </p>"},{"location":"02-resources/vxlan/02_vxlan_index/#example","title":"Example","text":"<p>A VXLAN Index is managed through the <code>VXLANIndex</code> Custom Resource Definition (CRD). Below is an example YAML manifest demonstrating the configuration of a VXLAN Index named \"index1\":</p> <pre><code>apiVersion: vxlan.be.kuid.dev/v1alpha1\nkind: VXLANIndex\nmetadata:\nname: index1\nspec:\nlabels:\ninv.kuid.dev/topology: topo1\n</code></pre>"},{"location":"02-resources/vxlan/02_vxlan_index/#status","title":"Status","text":"<p>he status of the <code>VXLANIndex</code> is indicated using the READY condition. A True Ready condition indicates the VXLANIndex was successful. When the Ready condition status is False, the reason and message information in the status provide additional details.</p> <pre><code>kubectl get vxlanindices.vxlan.be.kuid.dev \n</code></pre> <p>status</p> <pre><code>NAME     READY\nindex1   True\n</code></pre> <p>Upon successful creation of the VXLAN Index \"index1,\" the status should indicate a True Ready condition, confirming that the VXLAN Index has been successfully provisioned.</p>"},{"location":"02-resources/vxlan/02_vxlan_index/#expected-behavior","title":"Expected behavior","text":"<p>Upon successful creation of the <code>VXLANIndex</code> \"index1,\" the status should indicate a True Ready condition, confirming that the VXLAN Index has been successfully provisioned.</p>"},{"location":"02-resources/vxlan/03_vxlan_range/","title":"VXLAN Range","text":"<p>Kuid supports the subdivision of VXLAN Indexes into ranges, enhancing the flexibility and scalability of VXLAN configurations to accommodate diverse network environments and requirements.</p>"},{"location":"02-resources/vxlan/03_vxlan_range/#example","title":"Example","text":"<p>A VXLAN range is managed through the <code>VXLANClaim</code> Custom Resource (CR), requiring specific parameters such as the VXLAN index from which the VXLAN is claimed and the start and end VXLAN identifiers of the range. Below is an example YAML manifest demonstrating the configuration of a VXLAN range claim:</p> <pre><code>apiVersion: vxlan.be.kuid.dev/v1alpha1\nkind: VXLANClaim\nmetadata:\nname: index1.range1\nspec:\nindex: index1\nrange: 1024-65535\n</code></pre>"},{"location":"02-resources/vxlan/03_vxlan_range/#status","title":"Status","text":"<p>The status of the <code>VXLANClaim</code> is indicated using the READY condition. A True Ready condition indicates a successful VXLAN range claim in the system. The claimed VXLAN range is also displayed in the status.</p> <pre><code>kubectl get vxlanclaims.vxlan.be.kuid.dev static-claim\n</code></pre> <pre><code>NAME            READY   INDEX    CLAIMTYPE    CLAIMREQ     CLAIMRSP\nindex1.range1   True    index1   vxlanRange   1024-65535   1024-65535\n</code></pre> <p>If a <code>VXLANClaim</code> is unsuccessful, the condition will indicate the reason for the failure. For example, a <code>VXLANClaim</code> cannot overlap with existing entries.</p>"},{"location":"02-resources/vxlan/03_vxlan_range/#status_1","title":"Status","text":"<p>Upon successful creation of the VXLAN range claim, the status should indicate a True Ready condition, confirming that the VXLAN range has been successfully claimed in the system.</p>"},{"location":"02-resources/vxlan/04_vxlan/","title":"VXLAN","text":"<p>In Kuid, VXLANs are managed according RFC7348, ensuring adherence to industry best practices for network segmentation and organization. VXLANs are logically organized within VXLAN Indexes, providing a structured framework for VXLAN management.</p>"},{"location":"02-resources/vxlan/04_vxlan/#static-vxlan","title":"Static VXLAN","text":"<p>Static VXLANs are explicitly defined with a specific VXLAN ID and are managed through the VXLANClaim Custom Resource (CR). Each static VXLAN is associated with a VXLAN index and a unique VXLAN ID. If a static VXLAN is defined within a VXLAN Range it is associated to the VXLAN Range within the VXLAN Indez. Below is an example of static VXLAN configurations:</p>"},{"location":"02-resources/vxlan/04_vxlan/#example-static-vxlan","title":"Example static VXLAN","text":"<p>A static VXLAN is configured by specifying the VXLAN index and the static VXLAN ID in the <code>VXLANClaim</code> CR:</p> <pre><code>apiVersion: vxlan.be.kuid.dev/v1alpha1\nkind: VXLANClaim\nmetadata:\nname: index1.claim1\nspec:\nindex: index1\nid: 100000\n</code></pre>"},{"location":"02-resources/vxlan/04_vxlan/#expected-behavior","title":"Expected behavior","text":"<p>Upon successful creation of the static <code>VXLANClaim</code> \"index1.claim1\", the status should indicate a True Ready condition, confirming that the VXLAN has been successfully claimed with the specified VXLAN ID.</p>"},{"location":"02-resources/vxlan/04_vxlan/#dynamic-vxlan","title":"Dynamic VXLAN","text":"<p>Dynamic VXLANs are automatically assigned VXLAN IDs by the system and are managed through the <code>VXLANClaim</code> CR without specifying a VXLAN ID. Optionally, dynamic VXLANs can be restricted to specific VXLAN ranges using label selectors. Below are examples of dynamic VXLAN configurations:</p>"},{"location":"02-resources/vxlan/04_vxlan/#example-dynamic-vxlan","title":"Example dynamic VXLAN","text":"<p>A dynamic VXLAN is configured by specifying only the VXLAN index in the <code>VXLANClaim</code> CR:</p> <pre><code>apiVersion: vxlan.be.kuid.dev/v1alpha1\nkind: VXLANClaim\nmetadata:\nname: index1.claim2\nspec:\nindex: index1\n</code></pre>"},{"location":"02-resources/vxlan/04_vxlan/#example-dynamic-vxlan-within-a-range","title":"Example dynamic VXLAN within a range","text":"<p>A dynamic VXLAN can be restricted to a specific VXLAN range using label selectors in the <code>VXLANClaim</code> CR:</p> <pre><code>apiVersion: vxlan.be.kuid.dev/v1alpha1\nkind: VXLANClaim\nmetadata:\nname: index1.claim3\nspec:\nindex: index1\nselector:\nmatchLabels:\nbe.kuid.dev/claim-name: index1.range1\n</code></pre>"},{"location":"02-resources/vxlan/04_vxlan/#expected-behavior_1","title":"Expected behavior","text":"<p>Upon successful creation of the dynamic <code>VXLANClaim</code>, the status should indicate a True Ready condition, confirming that the VXLAN has been successfully claimed with an automatically assigned VXLAN ID.</p>"},{"location":"02-resources/vxlan/04_vxlan/#status","title":"Status","text":"<p>The status of VXLANClaims is indicated using the READY condition. A True Ready condition indicates a successful VXLANClaim. When the Ready condition status is False, the reason and message information in the status provide additional details.</p> <pre><code>kubectl get vxlanclaims.vxlan.be.kuid.dev --all\n</code></pre> <p>status of the static or dynamic VXLAN Claims</p> <pre><code>NAME            READY   INDEX    CLAIMTYPE        CLAIMREQ     CLAIMRSP\nindex1.claim1   True    index1   staticVXLANID    100000       100000\nindex1.claim2   True    index1   dynamicVXLANID                0\nindex1.claim3   True    index1   dynamicVXLANID                1024\nindex1.range1   True    index1   vxlanRange       1024-65535   1024-65535\n</code></pre>"},{"location":"02-resources/vxlan/05_vxlan_entry/","title":"VXLAN Entry","text":"<p><code>VXLAN Entries</code> in Kuid represent the entries stored in the backend system, providing valuable insights into the state of VXLAN configurations. They serve as a key component for troubleshooting and validating the proper behavior of the system.</p> <p>Given that VXLAN Entries are managed as Kubernetes resources, they can be queried programmatically to assess system health or perform specific tasks based on their contents.</p>"},{"location":"02-resources/vxlan/05_vxlan_entry/#example-output","title":"Example Output","text":"<p>The following example output illustrates the structure and contents of VXLAN Entries:</p> <pre><code>k get vxlanentries.vxlan.be.kuid.dev\n</code></pre> <p>output</p> <pre><code>NAME                    READY   INDEX    CLAIMTYPE        ID\nindex1.0-32             True    index1   dynamicVXLANID   0/32\nindex1.100000-32        True    index1   staticVXLANID    100000/32\nindex1.1024-22          True    index1   vxlanRange       1024/22\nindex1.16384-18         True    index1   vxlanRange       16384/18\nindex1.2048-21          True    index1   vxlanRange       2048/21\nindex1.32768-17         True    index1   vxlanRange       32768/17\nindex1.4096-20          True    index1   vxlanRange       4096/20\nindex1.8192-19          True    index1   vxlanRange       8192/19\nindex1.range1.1024-32   True    index1   dynamicVXLANID   1024/32\n</code></pre>"}]}